;CW4b „Instrukcje arytmetyczne i logiczne.Przesuwanie i rotacja bitów”
;Aplikacja korzystajaca z otwartego okna konsoli
.586
.MODEL flat, STDCALL
;--- stale ---
;--- z pliku windows.inc ---
STD_INPUT_HANDLE equ -10
STD_OUTPUT_HANDLE equ -11
;--- funkcje API Win32 ---
;--- z pliku user32.inc ---
CharToOemA PROTO :DWORD,:DWORD
;--- z pliku kernel32.inc ---
GetStdHandle PROTO :DWORD
ReadConsoleA PROTO :DWORD,:DWORD,:DWORD,:DWORD,:DWORD
WriteConsoleA PROTO :DWORD,:DWORD,:DWORD,:DWORD,:DWORD
ExitProcess PROTO :DWORD
wsprintfA PROTO C :VARARG
lstrlenA PROTO :DWORD
;-------------
includelib .\lib\user32.lib
includelib .\lib\kernel32.lib
;-------------
_DATA SEGMENT
hout DD ?
hinp DD ?
naglow DB "Autor aplikacji Andrzej Witek.",0
ALIGN 4 ; przesuniecie do adresu podzielnego na 4
rozmN DD $ - naglow ;iloœæ znaków w tablicy
zaprA DB 0Dh,0Ah,"Proszê wprowadziæ argument A [+Enter]: ",0
ALIGN 4
rozmA DD $ - zaprA ;iloœæ znaków w tablicy
zmA DD 1 ; argument A
zaprB DB 0Dh,0Ah,"Proszê wprowadziæ argument B [+Enter]: ",0
ALIGN 4
rozmB DD $ - zaprB ;iloœæ znaków w tablicy
zmB DD 2 ; argument B
zaprC DB 0Dh,0Ah,"Proszê wprowadziæ argument C [+Enter]: ",0
ALIGN 4
rozmC DD $ - zaprC ;iloœæ znaków w tablicy
zmC DD 3 ; argument C
zaprD DB 0Dh,0Ah,"Proszê wprowadziæ argument D [+Enter]: ",0
ALIGN 4
rozmD DD $ - zaprD ;iloœæ znaków w tablicy
zmD DD 4 ; argument D
wzor DB 0Dh,0Ah,"Funkcja f(A,B,C,D) = a # b * ~c | d= %ld",0
ALIGN 4
rozmW DD $ - wzor ;iloœæ znaków w tablicy
rout DD 0 ;faktyczna iloœæ wyprowadzonych znaków
rinp DD 0 ;faktyczna iloœæ wprowadzonych znaków
bufor DB 128 dup(?)
rbuf DD 128
_DATA ENDS
;------------
_TEXT SEGMENT
start:
;--- wywo³anie funkcji GetStdHandle
push STD_OUTPUT_HANDLE
call GetStdHandle ; wywo³anie funkcji GetStdHandle
mov hout, EAX ; deskryptor wyjœciowego bufora konsoli
push STD_INPUT_HANDLE
call GetStdHandle ; wywo³anie funkcji GetStdHandle
mov hinp, EAX ; deskryptor wejœciowego bufora konsoli
;--- nag³ówek ---------
push OFFSET naglow
push OFFSET naglow
call CharToOemA ; konwersja polskich znaków
;--- wyœwietlenie ---------
push 0 ; rezerwa, musi byæ zero
push OFFSET rout ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
push rozmN ; iloœæ znaków
push OFFSET naglow ; wska¿nik na tekst
push hout ; deskryptor buforu konsoli
call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
;--- zaproszenie A ---------
push OFFSET zaprA
push OFFSET zaprA
call CharToOemA ; konwersja polskich znaków
;--- wyœwietlenie zaproszenia A ---
push 0 ; rezerwa, musi byæ zero
push OFFSET rout ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
push rozmA ; iloœæ znaków
push OFFSET zaprA ; wska¿nik na tekst
push hout ; deskryptor buforu konsoli
call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
;--- zerowanie bufora
; lea EBX,bufor
; mov ECX,rbuf
;@@: mov BYTE PTR [EBX+ECX-1],0
; loop @B
;--- czekanie na wprowadzenie znaków, koniec przez Enter ---
push 0 ; rezerwa, musi byæ zero
push OFFSET rinp ; wskaŸnik na faktyczn¹ iloœæ wprowadzonych znaków
push rbuf ; rozmiar bufora
push OFFSET bufor ;wska¿nik na bufor
push hinp ; deskryptor buforu konsoli
call ReadConsoleA ; wywo³anie funkcji ReadConsoleA
lea EBX,bufor
mov EDI,rinp
mov BYTE PTR [EBX+EDI-1],0 ;zero na koñcu tekstu
;--- przekszta³cenie A
push OFFSET bufor
call ScanInt
add ESP, 8
mov zmA, EAX
;;;........ B, C, D ......................
;--- zaproszenie B---------
push OFFSET zaprB
push OFFSET zaprB
call CharToOemA ; konwersja polskich znaków
;--- wyœwietlenie zaproszenia B ---
push 0 ; rezerwa, musi byæ zero
push OFFSET rout ; wskaŸnik na faktycznš iloœæ wyprowadzonych znaków
push rozmB ; iloœæ znaków
push OFFSET zaprB ; wska¿nik na tekst
push hout ; deskryptor buforu konsoli
call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
;--- zerowanie bufora
; lea EBX,bufor
; mov ECX,rbuf
;@@: mov BYTE PTR [EBX+ECX-1],0
; loop @B
;--- czekanie na wprowadzenie znaków, koniec przez Enter ---
push 0 ; rezerwa, musi byæ zero
push OFFSET rinp ; wskaŸnik na faktycznš iloœæ wprowadzonych znaków
push rbuf ; rozmiar bufora
push OFFSET bufor ;wska¿nik na bufor
push hinp ; deskryptor buforu konsoli
call ReadConsoleA ; wywo³anie funkcji ReadConsoleA
lea EBX,bufor
mov EDI,rinp
mov BYTE PTR [EBX+EDI-1],0 ;zero na koñcu tekstu
;--- przekszta³cenie B
push OFFSET bufor
call ScanInt
add ESP, 8
mov zmB, EAX
;--- zaproszenie C ---------
push OFFSET zaprC
push OFFSET zaprC
call CharToOemA ; konwersja polskich znaków
;--- wyœwietlenie zaproszenia C ---
push 0 ; rezerwa, musi byæ zero
push OFFSET rout ; wskaŸnik na faktycznš ilosæ wyprowadzonych znaków
push rozmC ; iloœæ znaków
push OFFSET zaprC ; wska¿nik na tekst
push hout ; deskryptor buforu konsoli
call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
;--- zerowanie bufora
; lea EBX,bufor
; mov ECX,rbuf
;@@: mov BYTE PTR [EBX+ECX-1],0
; loop @B
;--- czekanie na wprowadzenie znaków, koniec przez Enter ---
push 0 ; rezerwa, musi byæ zero
push OFFSET rinp ; wskaŸnik na faktycznš iloœæ wprowadzonych znaków
push rbuf ; rozmiar bufora
push OFFSET bufor ;wska¿nik na bufor
push hinp ; deskryptor buforu konsoli
call ReadConsoleA ; wywo³anie funkcji ReadConsoleA
lea EBX,bufor
mov EDI,rinp
mov BYTE PTR [EBX+EDI-1],0 ;zero na koñcu tekstu
;--- przekszta³cenie C
push OFFSET bufor
call ScanInt
add ESP, 8
mov zmC, EAX
;--- zaproszenie D ---------
push OFFSET zaprD
push OFFSET zaprD
call CharToOemA ; konwersja polskich znaków
;--- wyœwietlenie zaproszenia D ---
push 0 ; rezerwa, musi byæ zero
push OFFSET rout ; wskaŸnik na faktycznš iloœæ wyprowadzonych znaków
push rozmD ; iloœæ znaków
push OFFSET zaprD ; wska¿nik na tekst
push hout ; deskryptor buforu konsoli
call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
;--- zerowanie bufora
; lea EBX,bufor
; mov ECX,rbuf
;@@: mov BYTE PTR [EBX+ECX-1],0
; loop @B
;--- czekanie na wprowadzenie znaków, koniec przez Enter ---
push 0 ; rezerwa, musi byæ zero
push OFFSET rinp ; wskaŸnik na faktycznš iloœæ wprowadzonych znaków
push rbuf ; rozmiar bufora
push OFFSET bufor ;wska¿nik na bufor
push hinp ; deskryptor buforu konsoli
call ReadConsoleA ; wywo³anie funkcji ReadConsoleA
lea EBX,bufor
mov EDI,rinp
mov BYTE PTR [EBX+EDI-1],0 ;zero na koñcu tekstu
;--- przekszta³cenie D
push OFFSET bufor
call ScanInt
add ESP, 8
mov zmD, EAX
;--- obliczenia A / B - C + D a|b*c*~d
mov EAX, zmA
mov EDX,0
xor EDX, zmB
mov EAX, zmC ; logiczna zmienna a przypisana do rejestru EAX
not EAX ; negacja bitowa
add EAX, 2 ; korekta wyniku negacji; w EAX negacja zmiennej c
or EAX, zmD
;;;; ................
;--- wyprowadzenie wyniku obliczeñ ---
push EAX
push OFFSET wzor
push OFFSET bufor
call wsprintfA ; zwraca iloœæ znaków w buforze
add ESP, 16 ; czyszczenie stosu
mov rinp, EAX ; zapamiêtywanie iloœci znaków
;--- wyœwietlenie wynika ---------
push 0 ; rezerwa, musi byæ zero
push OFFSET rout ; wskaŸnik na faktycznš iloœæ wyprowadzonych znaków
push rinp ; iloœæ znaków
push OFFSET bufor ; wska¿nik na tekst w buforze
push hout ; deskryptor buforu konsoli
call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
;--- zakoñczenie procesu ---------
push 0
call ExitProcess ; wywo³anie funkcji ExitProcess
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ScanInt PROC
;; funkcja ScanInt przekszta³ca cišg cyfr do liczby, którš jest zwracana przez EAX
;; argument - zakoñczony zerem wiersz z cyframi
;; rejestry: EBX - adres wiersza, EDX - znak liczby, ESI - indeks cyfry w wierszu, EDI - tymczasowy
;--- poczštek funkcji
push EBP
mov EBP, ESP ; wska?nik stosu ESP przypisujemy do EBP
;--- odk³adanie na stos
push EBX
push ECX
push EDX
push ESI
push EDI
;--- przygotowywanie cyklu
mov EBX, [EBP+8]
push EBX
call lstrlenA
mov EDI, EAX ;iloœæ znaków
mov ECX, EAX ;iloœæ powtórzeñ = iloœæ znaków
xor ESI, ESI ; wyzerowanie ESI
xor EDX, EDX ; wyzerowanie EDX
xor EAX, EAX ; wyzerowanie EAX
mov EBX, [EBP+8] ; adres tekstu
;--- cykl --------------------------
pocz:
cmp BYTE PTR [EBX+ESI], 0h ;porównanie z kodem \0
jne @F
jmp et4
@@:
cmp BYTE PTR [EBX+ESI], 0Dh ;porównanie z kodem CR
jne @F
jmp et4
@@:
cmp BYTE PTR [EBX+ESI], 0Ah ;porównanie z kodem LF
jne @F
jmp et4
@@:
cmp BYTE PTR [EBX+ESI], 02Dh ;porównanie z kodem -
jne @F
mov EDX, 1
jmp nast
@@:
cmp BYTE PTR [EBX+ESI], 030h ;porównanie z kodem 0
jae @F
jmp nast
@@:
cmp BYTE PTR [EBX+ESI], 039h ;porównanie z kodem 9
jbe @F
jmp nast
;----
@@:
push EDX ; do EDX procesor mo¿e zapisaæ wynik mno¿enia
mov EDI, 10
mul EDI ;mno¿enie EAX * EDI
mov EDI, EAX ; tymczasowo z EAX do EDI
xor EAX, EAX ;zerowani EAX
mov AL, BYTE PTR [EBX+ESI]
sub AL, 030h ; korekta: cyfra = kod znaku - kod 0
add EAX, EDI ; dodanie cyfry
pop EDX
nast:
inc ESI
loop pocz
;--- wynik
or EDX, EDX ;analiza znacznika EDX
jz @F
neg EAX
@@:
et4:
;--- zdejmowanie ze stosu
pop EDI
pop ESI
pop EDX
pop ECX
pop EBX
;--- powrót
mov ESP, EBP ; przywracamy wskaŸnik stosu ESP
pop EBP
ret
ScanInt ENDP
_TEXT ENDS
END start