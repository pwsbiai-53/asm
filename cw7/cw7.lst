Microsoft (R) Macro Assembler Version 6.14.8444		    04/29/20 21:36:31
.\cw7\cw7.asm						     Page 1 - 1


				;-------------------------------------------|
				;				  cw7.asm                   |
				;      Operacje na plikach i katalogach.    |
				;                                           |
				;	               Autor: Grzegorz Makowski |
				;                  MASM ver: 6.14.8444      |
				;                  ost. akt. 29.04.2020     |
				;-------------------------------------------|
				.586p
				.model flat, stdcall
				;-------------------------------------------|
				;     wczytanie plikow zewnetrznych         |
				;-------------------------------------------| 
				;-------------------------------------------|
				;    wczytanie wlasnych makr z pliku        |
				;-------------------------------------------|
				include mojemakra.mac	; Makra
			      C ;-------------------------------------------|
			      C ;				  mojemakra.mac             |
			      C ;      Operacje na plikach i katalogach.    |
			      C ;                ver 1.0                    |
			      C ;	               Autor: Grzegorz Makowski |
			      C ;                  MASM ver: 6.14.8444      |
			      C ;                  ost. akt. 28.04.2020     |
			      C ;-------------------------------------------|
			      C ;-------------------------------------------|
			      C ;           Makro do deskyptorow            |
			      C ;-------------------------------------------|
			      C podajdeskr macro handle, deskrypt 
			      C 	push	handle
			      C 	call	GetStdHandle
			      C 	mov	deskrypt,eax ; deskryptor bufora konsoli
			      C endm
			      C 
			      C ;-------------------------------------------|
			      C ;       Konwersja polskich znakow           |
			      C ;     Przyjmuje tab znakowa i bufor         |
			      C ;-------------------------------------------|
			      C plznaki macro text, bufor
			      C 	invoke CharToOemA, addr text, addr bufor
			      C endm
			      C 
			      C ;-------------------------------------------|
			      C ;Wyœwietlanie wyniku- tekstu na ekranie     |
			      C ;  bufor z plznaki lub kazy inny tekst      |
			      C ;-------------------------------------------|
			      C 
			      C wyswietl macro bufor, rozmiar
			      C 	push 0 ; rezerwa, musi byæ zero
			      C 	push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
			      C 	push rozmiar ; iloœæ znaków
			      C 	push offset bufor ; wska¿nik na tekst w buforze
			      C 	push hout ; deskryptor buforu konsoli
			      C 	call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
			      C endm
			      C 
			      C ;-------------------------------------------|
			      C ;     Makro do robienia odstepu linii       |
			      C ;przyjmuje kod hex nowej linni i ilosc zn.  |
			      C ;-------------------------------------------| 
			      C nowalinia macro nowa, ilznk
			      C 	push	0		        ; rezerwa, musi byæ zero
			      C 	push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
			      C 	push	ilznk		        ; iloœæ znaków
			      C 	push	offset nowa 	; wska¿nik na tekst
			      C 	push	hout		    ; deskryptor buforu konsoli
			      C 	call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
			      C endm
			      C 
				include cw7.mac			; Makra dedykowane do zad 7
			      C ;-------------------------------------------|
			      C ;				  cw7.mac                   |
			      C ;      Operacje na plikach i katalogach.    |
			      C ;            Makro do opisu zadañ           |
			      C ;                ver 1.0                    |
			      C ;	               Autor: Grzegorz Makowski |
			      C ;                  MASM ver: 6.14.8444      |
			      C ;                  ost. akt. 29.04.2020     |
			      C ;-------------------------------------------|
			      C ;-------------------------------------------|
			      C ;              Wyswietlenie nag³ówka        |
			      C ;-------------------------------------------|
			      C Naglowek macro 
			      C ;--- wywo³anie funkcji GetStdHandle 
			      C podajdeskr STD_OUTPUT_HANDLE, hout
			      C plznaki naglow, buf ; konwersja 
			      C ;--- wyœwietlenie  powitania ---------
			      C wyswietl buf, rozmN ; wyswietlenie
			      C nowalinia nl, 2		; nowa linia 
			      C nowalinia nl, 2		; nowa linia 
			      C endm
			      C ;-------------------------------------------|
			      C ;         Wyswietlenie zadania a            |
			      C ;-------------------------------------------|
			      C zadA macro
			      C ;--- wywietlenie tekstu Zadanie a ----
			      C plznaki zadanieA, buff		;
			      C wyswietl buff, rozmA		; wyswietlenie -
			      C nowalinia nl, 2		; nowa linia - MAKRO
			      C nowalinia nl, 2		; nowa linia - MAKRO
			      C plznaki opisKatZadA, buf		; MAKRO 
			      C wyswietl buf, rozmkatzada	; wyswietlenie opisu zadania 
			      C endm
			      C ;-------------------------------------------|
			      C ;         Wyswietlenie zadania b            |
			      C ;-------------------------------------------|
			      C zadB macro 
			      C plznaki zadanieB, buff
			      C wyswietl buff, rozmB
			      C nowalinia nxt,2     ; nowa linia
			      C nowalinia nl,2
			      C plznaki opisKatZadB, buff
			      C wyswietl buff, rozmkatzadB
			      C nowalinia nxt,2     ; nowa linia
			      C endm
			      C 
				;-------------------------------------------|
				;      bilioteki systemowe i masm           |
				;-------------------------------------------|
				includelib .\lib\user32.lib
				includelib .\lib\kernel32.lib
				includelib .\lib\masm32.lib
				;-------------------------------------------|
				;    stale z pliku .\include\windows.inc    |
				;-------------------------------------------|
 =-0000000A			STD_INPUT_HANDLE equ -10
 =-0000000B			STD_OUTPUT_HANDLE equ -11
				;-------------------------------------------|
				;			stale do obslugi plikow	        |
				;-------------------------------------------|
 = 80000000			GENERIC_READ equ 80000000h
 = 40000000			GENERIC_WRITE equ 40000000h
 = 00000001			CREATE_NEW equ 1
 = 00000002			CREATE_ALWAYS equ 2
 = 00000003			OPEN_EXISTING equ 3
 = 00000004			OPEN_ALWAYS equ 4
 = 00000005			TRUNCATE_EXISTING equ 5
 = 80000000			FILE_FLAG_WRITE_THROUGH equ 80000000h
 = 40000000			FILE_FLAG_OVERLAPPED equ 40000000h
 = 20000000			FILE_FLAG_NO_BUFFERING equ 20000000h
 = 10000000			FILE_FLAG_RANDOM_ACCESS equ 10000000h
 = 08000000			FILE_FLAG_SEQUENTIAL_SCAN equ 8000000h
 = 04000000			FILE_FLAG_DELETE_ON_CLOSE equ 4000000h
 = 02000000			FILE_FLAG_BACKUP_SEMANTICS equ 2000000h
 = 01000000			FILE_FLAG_POSIX_SEMANTICS equ 1000000h
 = 00000001			FILE_ATTRIBUTE_READONLY equ 1h
 = 00000002			FILE_ATTRIBUTE_HIddEN equ 2h
 = 00000004			FILE_ATTRIBUTE_SYSTEM equ 4h
 = 00000010			FILE_ATTRIBUTE_DIRECTORY equ 10h
 = 00000020			FILE_ATTRIBUTE_ARCHIVE equ 20h
 = 00000080			FILE_ATTRIBUTE_NORMAL equ 80h
 = 00000100			FILE_ATTRIBUTE_TEMPORARY equ 100h
 = 00000800			FILE_ATTRIBUTE_COMPRESSED equ 800h
 = 00000100			FORMAT_MESSAGE_ALLOCATE_BUFFER equ 100h
 = 00000200			FORMAT_MESSAGE_IGNORE_INSERTS equ 200h
 = 00000400			FORMAT_MESSAGE_FROM_STRING equ 400h
 = 00000800			FORMAT_MESSAGE_FROM_HMODULE equ 800h
 = 00001000			FORMAT_MESSAGE_FROM_SYSTEM equ 1000h
 = 00002000			FORMAT_MESSAGE_ARGUMENT_ARRAY equ 2000h
 = 000000FF			FORMAT_MESSAGE_MAX_WIDTH_MASK equ 0FFh
				;--------------------------------|
				;            stale               |
				;--------------------------------|
 = 00000200			mbuf = 512
				;--- funkcje API Win32 z pliku .\include\user32.inc ---
				CharToOemA proto :dword,:dword
				;--- z pliku .\include\kernel32.inc ---
				GetStdHandle proto :dword
				ReadConsoleA proto :dword,:dword,:dword,:dword,:dword
				WriteConsoleA proto :dword,:dword,:dword,:dword,:dword
				ExitProcess proto :dword
				wsprintfA proto c :vararg
				;; int wsprintf(LPTSTR lpOut,// pointer to buffer for output
				;; LPCTSTR lpFmt,// pointer to format-control string
				;; ... // optional arguments );
				lstrlenA proto :dword
				GetCurrentDirectoryA proto :dword,:dword
				;;nBufferLength, lpBuffer; zwraca length
				CreateDirectoryA proto :dword,:dword
				;;lpPathName, lpSecurityAttributes; zwraca 0 jeœli b³ad
				lstrcatA proto :dword,:dword
				;; lpString1, lpString2; zwraca lpString1
				CreateFileA proto :dword,:dword,:dword,:dword,:dword,:dword,:dword
				;; LPCTSTR lpszName, DWORD fdwAccess,
				;; DWORD fdwShareMode, LPSECURITY_ATTRIBUTES lpsa, DWORD fdwCreate,
				;; DWORD fdwAttrsAndFlags, HANDLE hTemplateFile
				lstrcpyA proto :dword,:dword
				;;LPTSTR lpString1 // address of buffer, LPCTSTR lpString2 // address of string to copy
				CloseHandle proto :dword
				;; BOOL CloseHandle(HANDLE hObject)
				WriteFile proto :dword,:dword,:dword,:dword,:dword
				;; BOOL WriteFile(
				;; HANDLE hFile, // handle to file to write to
				;; LPCVOID lpBuffer, // pointer to data to write to file
				;; DWORD nNumberOfBytesToWrite, // number of bytes to write
				;; LPDWORD lpNumberOfBytesWritten, // pointer to number of bytes written
				;; LPOVERLAPPED lpOverlapped // pointer to structure needed for overlapped I/O
				;;);
				ReadFile proto :dword,:dword,:dword,:dword,:dword
				;;BOOL ReadFile(
				;;HANDLE hFile, // handle of file to read
				;;LPVOID lpBuffer, // address of buffer that receives data
				;;DWORD nNumberOfBytesToRead, // number of bytes to read
				;;LPDWORD lpNumberOfBytesRead, // address of number of bytes read
				;;LPOVERLAPPED lpOverlapped // address of structure for data
				;;);
				CopyFileA proto :dword,:dword,:dword
				;; BOOL CopyFile(
				;;LPCTSTR lpExistingFileName, // pointer to name of an existing file
				;;LPCTSTR lpNewFileName, // pointer to filename to copy to
				;;BOOL bFailIfExists // flag for operation if file exists
				;;);
				GetLastError proto
				;--- z pliku .\include\masm32.inc ---
				nrandom proto :dword
				;--- funkcje
				ScanInt proto C adres:dword

				;----------------------------------------|
				;    Poczatek segmentu danych            |
				;----------------------------------------|
 00000000			_data segment
 00000000 00000000		hout dd 0
 00000004 0D 0A 00		nl db 0Dh, 0Ah, 0	; nowa linia
 00000007 0D 0A 20 00		nl2	db 0Dh,0Ah,20h,0 ; nowa inne formatowanie
 0000000B 0D 0A 00		nxt db 13,10,0 ; nastepny wiersz
 0000000E 41 75 74 6F 72	naglow db "Autor aplikacji Grzegorz Makowski i53",0
	   20 61 70 6C 69
	   6B 61 63 6A 69
	   20 47 72 7A 65
	   67 6F 72 7A 20
	   4D 61 6B 6F 77
	   73 6B 69 20 69
	   35 33 00
				align 4 ; przesuniecie do adresu podzielnego na 4
 00000034 00000026		rozmN dd $ - naglow ;iloœæ znaków w tablicy
 00000038 5A 61 64 61 6E	zadanieA db "Zadanie a",0
	   69 65 20 61 00
				align 4
 00000044 0000000C		rozmA dd $ - zadanieA ; ilosc znakow tekstu zadanieA
 00000048 8C 63 69 65 7A	opisKatZadA db "Œciezki do katalogu DANE i pliku test.txt.",0
	   6B 69 20 64 6F
	   20 6B 61 74 61
	   6C 6F 67 75 20
	   44 41 4E 45 20
	   69 20 70 6C 69
	   6B 75 20 74 65
	   73 74 2E 74 78
	   74 2E 00
				align 4
 00000074 0000002C		rozmkatzada dd $ - opisKatZadA ; ilosc znakow w opisie zadania a
				align 4
 00000078 57 79 9C 77 69	opisKatZadA2 db "Wyœwietlenie losowej zawrtoœci pliku test",0
	   65 74 6C 65 6E
	   69 65 20 6C 6F
	   73 6F 77 65 6A
	   20 7A 61 77 72
	   74 6F 9C 63 69
	   20 70 6C 69 6B
	   75 20 74 65 73
	   74 00
				align 4
 000000A4 0000002C		rozmkatzada2 dd $ - opisKatZadA2 ; ilosc znakow w opisie zadania a
 000000A8 5A 61 64 61 6E	zadanieB db "Zadanie b",0
	   69 65 20 62 00
				align 4
 000000B4 0000000C		rozmB dd $ - zadanieB ; ilosc znakow tekstu zadanieB
				align 4
 000000B8 8C 63 69 65 7A	opisKatZadB db "Œciezki do plików: plik1.txt i plik2.txt",0
	   6B 69 20 64 6F
	   20 70 6C 69 6B
	   F3 77 3A 20 70
	   6C 69 6B 31 2E
	   74 78 74 20 69
	   20 70 6C 69 6B
	   32 2E 74 78 74
	   00
				align 4
 000000E4 0000002C		rozmkatzadB dd $ - opisKatZadB ; ilosc znakow w opisie zadania a
				align 4
 000000E8 00000000		rout dd 0
 000000EC  00000200 [		sciezka db mbuf dup(?)
	    00
	   ]
 000002EC 5C 44 41 4E 45	nazwaDANE db "\DANE",0
	   00
 000002F2 5C 74 65 73 74	nazwa db "\test.txt",0
	   2E 74 78 74 00
 000002FC 5C 70 6C 69 6B	nazwa1 db "\plik1.txt",0
	   31 2E 74 78 74
	   00
 00000307 5C 70 6C 69 6B	nazwa2 db "\plik2.txt",0
	   32 2E 74 78 74
	   00
 00000312 0D 0A 44 61 6E	nazwat1 db 13,10,"Dane z plik1.txt - co 8 nieparzysta:",13,10,0
	   65 20 7A 20 70
	   6C 69 6B 31 2E
	   74 78 74 20 2D
	   20 63 6F 20 38
	   20 6E 69 65 70
	   61 72 7A 79 73
	   74 61 3A 0D 0A
	   00
 0000033B 0D 0A 44 61 6E	nazwat2 db 13,10,"Dane z plik2.txt - co 8 parzysta:",13,10,0
	   65 20 7A 20 70
	   6C 69 6B 32 2E
	   74 78 74 20 2D
	   20 63 6F 20 38
	   20 70 61 72 7A
	   79 73 74 61 3A
	   0D 0A 00
 00000361  00000200 [		tesTxt db mbuf dup(?)	; bufor na sciezke dla pliku test.txt
	    00
	   ]
 00000561  00000200 [		tesTxt1 db mbuf dup(?)	; bufor na sciezke dla pliku test1.txt
	    00
	   ]
 00000761  00000200 [		tesTxt2 db mbuf dup(?)	; bufor na sciezke dla pliku test2.txt
	    00
	   ]
 00000961  00000200 [		katDane db mbuf dup(?)	; bufor katalogu
	    00
	   ]
 00000B61 00000000		hfile dd 0				; uchwyt do pliku test
 00000B65 00000000		hfile1 dd 0				; uchwyt do pliku test1
 00000B69 00000000		hfile2 dd 0				; uchwyt do pliku test2
 00000B6D  00000064 [		tab dd 100 dup(0)
	    00000000
	   ]
 00000CFD 00000000		nbytes dd 0
 00000D01 00000000		liczba dd 0
 00000D05 00000000		licznik1 dd 0
 00000D09 00000000		licznik2 dd 0
 00000D0D  00000200 [		bufor db mbuf dup(0)
	    00
	   ]
 00000F0D 00000000		leng dd 0
 00000F11  00000200 [		buf db mbuf dup(0)		; bufor pomocniczy
	    00
	   ]
 00001111  00000200 [		buff db mbuf dup(0)		; bufor pomocniczy
	    00
	   ]
 00001311 20 25 33 6C 64	format1 db " %3ld",13,10,0
	   0D 0A 00
 00001319 20 25 33 6C 64	format2 db " %3ld",0
	   00
 0000131F 00000000		rsymb dd 0
 00001323			_data ends
				;----------------------------------------|
				;    Koniec segmentu danych              |
				;----------------------------------------|

				;----------------------------------------|
				;    Poczatek segmentu kodu              |
				;----------------------------------------|
 00000000			_text segment
 00000000			start:
 00000000			;--- nag³ówek ---------
				Naglowek ; Makro
 00000000  6A F5	     2		push	STD_OUTPUT_HANDLE
 00000002  E8 00000000 E     2		call	GetStdHandle
 00000007  A3 00000000 R     2		mov	hout,eax ; deskryptor bufora konsoli
 0000001B  6A 00	     2		push 0 ; rezerwa, musi byæ zero
 0000001D  68 000000E8 R     2		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000022  FF 35 00000034 R  2		push rozmN ; iloœæ znaków
 00000028  68 00000F11 R     2		push offset buf ; wska¿nik na tekst w buforze
 0000002D  FF 35 00000000 R  2		push hout ; deskryptor buforu konsoli
 00000033  E8 00000000 E     2		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
 00000038  6A 00	     2		push	0		        ; rezerwa, musi byæ zero
 0000003A  68 000000E8 R     2		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000003F  6A 02	     2		push	2		        ; iloœæ znaków
 00000041  68 00000004 R     2		push	offset nl 	; wska¿nik na tekst
 00000046  FF 35 00000000 R  2		push	hout		    ; deskryptor buforu konsoli
 0000004C  E8 00000000 E     2		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 00000051  6A 00	     2		push	0		        ; rezerwa, musi byæ zero
 00000053  68 000000E8 R     2		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000058  6A 02	     2		push	2		        ; iloœæ znaków
 0000005A  68 00000004 R     2		push	offset nl 	; wska¿nik na tekst
 0000005F  FF 35 00000000 R  2		push	hout		    ; deskryptor buforu konsoli
 00000065  E8 00000000 E     2		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				zadA ; Makro
 00000079  6A 00	     2		push 0 ; rezerwa, musi byæ zero
 0000007B  68 000000E8 R     2		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000080  FF 35 00000044 R  2		push rozmA ; iloœæ znaków
 00000086  68 00001111 R     2		push offset buff ; wska¿nik na tekst w buforze
 0000008B  FF 35 00000000 R  2		push hout ; deskryptor buforu konsoli
 00000091  E8 00000000 E     2		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
 00000096  6A 00	     2		push	0		        ; rezerwa, musi byæ zero
 00000098  68 000000E8 R     2		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000009D  6A 02	     2		push	2		        ; iloœæ znaków
 0000009F  68 00000004 R     2		push	offset nl 	; wska¿nik na tekst
 000000A4  FF 35 00000000 R  2		push	hout		    ; deskryptor buforu konsoli
 000000AA  E8 00000000 E     2		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 000000AF  6A 00	     2		push	0		        ; rezerwa, musi byæ zero
 000000B1  68 000000E8 R     2		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000000B6  6A 02	     2		push	2		        ; iloœæ znaków
 000000B8  68 00000004 R     2		push	offset nl 	; wska¿nik na tekst
 000000BD  FF 35 00000000 R  2		push	hout		    ; deskryptor buforu konsoli
 000000C3  E8 00000000 E     2		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 000000D7  6A 00	     2		push 0 ; rezerwa, musi byæ zero
 000000D9  68 000000E8 R     2		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000000DE  FF 35 00000074 R  2		push rozmkatzada ; iloœæ znaków
 000000E4  68 00000F11 R     2		push offset buf ; wska¿nik na tekst w buforze
 000000E9  FF 35 00000000 R  2		push hout ; deskryptor buforu konsoli
 000000EF  E8 00000000 E     2		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				nowalinia nl, 2		; MAKRO
 000000F4  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000000F6  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000000FB  6A 02	     1		push	2		        ; iloœæ znaków
 000000FD  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000102  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000108  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				invoke GetCurrentDirectoryA, mbuf, offset sciezka ; pobranie pe³nej œcie¿ki
				invoke lstrcpyA, offset katDane, offset sciezka ; ³aczenie stringow
				invoke lstrcatA, offset katDane, offset nazwaDANE
				invoke lstrlenA, offset katDane
 00000144  A3 00000F0D R	mov leng, eax
				wyswietl offset katDane, leng ; wyswietlenie pe³nego katalogu DANE - MAKRO
 00000149  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 0000014B  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000150  FF 35 00000F0D R  1		push leng ; iloœæ znaków
 00000156  68 00000961 R     1		push offset offset katDane ; wska¿nik na tekst w buforze
 0000015B  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000161  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;--- nowa linia
				nowalinia nl, 2		; nowa linia - MAKRO
 00000166  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000168  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000016D  6A 02	     1		push	2		        ; iloœæ znaków
 0000016F  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000174  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000017A  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				invoke CreateDirectoryA, offset katDane , 0 ; utworzenie katalogu
				invoke lstrcpyA, offset tesTxt, offset katDane
				invoke lstrcatA, offset tesTxt, offset nazwa
				invoke lstrlenA, offset tesTxt
 000001B3  A3 00000F0D R	mov leng, eax
				wyswietl offset tesTxt, leng ; MAKRO - wyswietlenie sciezki do pliku test.txt
 000001B8  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 000001BA  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000001BF  FF 35 00000F0D R  1		push leng ; iloœæ znaków
 000001C5  68 00000361 R     1		push offset offset tesTxt ; wska¿nik na tekst w buforze
 000001CA  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 000001D0  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;-- nowa linia
				nowalinia nl, 2		; nowa linia - MAKRO
 000001D5  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000001D7  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000001DC  6A 02	     1		push	2		        ; iloœæ znaków
 000001DE  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000001E3  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000001E9  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				invoke CreateFileA, offset tesTxt,GENERIC_WRITE , 0, 0, CREATE_ALWAYS, 0, 0 ; tworzenie pliku
 00000207  A3 00000B61 R	mov hfile, eax
				;---
				invoke CloseHandle, hfile ; zamkniecie pliku test
				;--- liczby pseudolosowe -> tablica
 00000217  8D 1D 00000B6D R	lea ebx, tab
 0000021D  BF 00000000		mov edi, 0
 00000222  B9 00000064		mov ecx, 100
 00000227			losowe:
 00000227  51			push ecx
 00000228  53			push ebx
				;;;
				invoke nrandom, 200
 00000233  83 E8 63		sub eax, 99
				;;;
 00000236  5B			pop ebx
 00000237  89 03		mov dword ptr [ebx], eax
 00000239  83 C3 04		add ebx, 4
 0000023C  59			pop ecx
 0000023D  E2 E8		loop losowe
				;------------------------------|
				;       plik "test.txt"        |
				;------------------------------|
				;--- nowa linia
				nowalinia nxt,2     ; nowa linia
 0000023F  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000241  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000246  6A 02	     1		push	2		        ; iloœæ znaków
 00000248  68 0000000B R     1		push	offset nxt 	; wska¿nik na tekst
 0000024D  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000253  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				invoke CreateFileA, offset tesTxt,GENERIC_READ OR GENERIC_WRITE , 0, 0, OPEN_EXISTING, 0, 0 ; tworzenie pliku
 00000271  A3 00000B61 R	mov hfile, eax
				;-- z tablicy do pliku ----
 00000276  8D 1D 00000B6D R	lea ebx, tab
 0000027C  B9 00000064		mov ecx, 100
 00000281			powt:
 00000281  51			push ecx
 00000282  53			push ebx
				invoke wsprintfA,offset buf,offset format1,DWORD PTR [ebx]
 00000297  A3 0000131F R	mov rsymb,eax
				invoke WriteFile, hfile, offset buf ,rsymb , offset nbytes, 0
 000002B9  5B			pop ebx
 000002BA  83 C3 04		add ebx, 4
 000002BD  59			pop ecx
 000002BE  E2 C1		loop powt
				;;;
				invoke CloseHandle, hfile
				;-- pobranie z tablicy na ekran po 10 liczb na wierszu ----
 000002CB  8D 1D 00000B6D R	lea ebx, tab
 000002D1  B9 00000064		mov ecx, 100
 000002D6  C7 05 00000D05 R	mov licznik1,0
	   00000000
 000002E0			powtE:
 000002E0  51			push ecx ;;
 000002E1  53			push ebx
				;;;
 000002E2  A1 00000D05 R	mov eax,licznik1
 000002E7  0B C0		or eax,eax
 000002E9  75 19		jnz @F
				;--- new line ---------
				nowalinia nl, 2		;   MAKRO
 000002EB  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000002ED  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000002F2  6A 02	     1		push	2		        ; iloœæ znaków
 000002F4  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000002F9  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000002FF  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 00000304			@@:
 00000304  FF 05 00000D05 R	inc licznik1
 0000030A  83 3D 00000D05 R	cmp licznik1,10
	   0A
 00000311  72 0A		jb @F
 00000313  C7 05 00000D05 R	mov licznik1,0
	   00000000
 0000031D			@@:
 0000031D  5B			pop ebx
 0000031E  53			push ebx
				invoke wsprintfA,offset buf,offset format2,DWORD PTR [ebx]
 00000333  A3 0000131F R	mov rsymb,eax
				invoke WriteConsoleA, hout, offset buf ,rsymb , offset nbytes, 0
				;;;
 00000355  5B			pop ebx
 00000356  83 C3 04		add ebx, 4
 00000359  59			pop ecx
 0000035A  E2 84		loop powtE
				;--- new line ---------
				nowalinia nl, 2		;   MAKRO
 0000035C  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000035E  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000363  6A 02	     1		push	2		        ; iloœæ znaków
 00000365  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 0000036A  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000370  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;--- new line ---------
				nowalinia nl, 2		;   MAKRO
 00000375  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000377  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000037C  6A 02	     1		push	2		        ; iloœæ znaków
 0000037E  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000383  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000389  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;------------------------------|
				;  Operacje na plikach         |
				;------------------------------|
				zadB ; Makro
 0000039D  6A 00	     2		push 0 ; rezerwa, musi byæ zero
 0000039F  68 000000E8 R     2		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000003A4  FF 35 000000B4 R  2		push rozmB ; iloœæ znaków
 000003AA  68 00001111 R     2		push offset buff ; wska¿nik na tekst w buforze
 000003AF  FF 35 00000000 R  2		push hout ; deskryptor buforu konsoli
 000003B5  E8 00000000 E     2		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
 000003BA  6A 00	     2		push	0		        ; rezerwa, musi byæ zero
 000003BC  68 000000E8 R     2		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000003C1  6A 02	     2		push	2		        ; iloœæ znaków
 000003C3  68 0000000B R     2		push	offset nxt 	; wska¿nik na tekst
 000003C8  FF 35 00000000 R  2		push	hout		    ; deskryptor buforu konsoli
 000003CE  E8 00000000 E     2		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 000003D3  6A 00	     2		push	0		        ; rezerwa, musi byæ zero
 000003D5  68 000000E8 R     2		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000003DA  6A 02	     2		push	2		        ; iloœæ znaków
 000003DC  68 00000004 R     2		push	offset nl 	; wska¿nik na tekst
 000003E1  FF 35 00000000 R  2		push	hout		    ; deskryptor buforu konsoli
 000003E7  E8 00000000 E     2		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 000003FB  6A 00	     2		push 0 ; rezerwa, musi byæ zero
 000003FD  68 000000E8 R     2		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000402  FF 35 000000E4 R  2		push rozmkatzadB ; iloœæ znaków
 00000408  68 00001111 R     2		push offset buff ; wska¿nik na tekst w buforze
 0000040D  FF 35 00000000 R  2		push hout ; deskryptor buforu konsoli
 00000413  E8 00000000 E     2		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
 00000418  6A 00	     2		push	0		        ; rezerwa, musi byæ zero
 0000041A  68 000000E8 R     2		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000041F  6A 02	     2		push	2		        ; iloœæ znaków
 00000421  68 0000000B R     2		push	offset nxt 	; wska¿nik na tekst
 00000426  FF 35 00000000 R  2		push	hout		    ; deskryptor buforu konsoli
 0000042C  E8 00000000 E     2		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				invoke CreateFileA, offset tesTxt,GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0 ; plik test.txt
 0000044A  A3 00000B61 R	mov hfile, eax
				invoke lstrcpyA, offset tesTxt1, offset katDane
				invoke lstrcatA, offset tesTxt1, offset nazwa1
				invoke lstrlenA, offset tesTxt1
 00000477  A3 00000F0D R	mov leng, eax
				wyswietl offset tesTxt1, leng ; wyswietlenie 
 0000047C  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 0000047E  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000483  FF 35 00000F0D R  1		push leng ; iloœæ znaków
 00000489  68 00000561 R     1		push offset offset tesTxt1 ; wska¿nik na tekst w buforze
 0000048E  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000494  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				nowalinia nxt,2     ; nowa linia
 00000499  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000049B  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000004A0  6A 02	     1		push	2		        ; iloœæ znaków
 000004A2  68 0000000B R     1		push	offset nxt 	; wska¿nik na tekst
 000004A7  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000004AD  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				invoke CreateFileA, offset tesTxt1,GENERIC_WRITE , 0, 0, CREATE_ALWAYS, 0, 0 ; stworzenie pliku
 000004CB  A3 00000B65 R	mov hfile1, eax
				invoke lstrcpyA, offset tesTxt2, offset katDane
				invoke lstrcatA, offset tesTxt2, offset nazwa2
				invoke lstrlenA, offset tesTxt2
 000004F8  A3 00000F0D R	mov leng, eax
				wyswietl offset tesTxt2, leng
 000004FD  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 000004FF  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000504  FF 35 00000F0D R  1		push leng ; iloœæ znaków
 0000050A  68 00000761 R     1		push offset offset tesTxt2 ; wska¿nik na tekst w buforze
 0000050F  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000515  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				nowalinia nxt,2     ; nowa linia
 0000051A  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000051C  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000521  6A 02	     1		push	2		        ; iloœæ znaków
 00000523  68 0000000B R     1		push	offset nxt 	; wska¿nik na tekst
 00000528  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000052E  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				invoke CreateFileA, offset tesTxt2,GENERIC_WRITE , 0, 0, CREATE_ALWAYS, 0, 0 ; stworzenie pliku
 0000054C  A3 00000B69 R	mov hfile2, eax
				;---------
 00000551  B9 00000064		mov ecx, 100
 00000556  C7 05 00000D05 R	mov licznik1,8 ;co osma parzysta
	   00000008
 00000560  C7 05 00000D09 R	mov licznik2,8 ;co osma nieparzysta
	   00000008
 0000056A			powt2:
 0000056A  51			push ecx
				invoke ReadFile, hfile, offset buf ,6 , offset nbytes, 0 ;;
 00000584  83 3D 00000CFD R	cmp nbytes,0
	   00
 0000058B  75 05		jnz @F
 0000058D  E9 000000D9		jmp zamyk
 00000592			@@:
				invoke ScanInt,offset buf ; tekst ASCII -> liczba
 0000059F  A3 00000D01 R	mov liczba,eax
 000005A4  A1 00000D01 R	mov eax,liczba
 000005A9  A9 00000001		test eax,1h
 000005AE  74 5A		jz parz
				;-- nieparzysta
 000005B0  FF 0D 00000D09 R	dec licznik2
 000005B6  83 3D 00000D09 R	cmp licznik2,0
	   00
 000005BD  74 05		je @F
 000005BF  E9 0000009D		jmp dalej
 000005C4			@@:
 000005C4  C7 05 00000D09 R	mov licznik2,8
	   00000008
				invoke wsprintfA,offset buf,offset format1,liczba
 000005E6  A3 0000131F R	mov rsymb,eax
				invoke WriteFile, hfile1, offset buf ,rsymb , offset nbytes, 0
 00000608  EB 57		jmp dalej
 0000060A			parz:
				;-- parzysta
 0000060A  FF 0D 00000D05 R	dec licznik1
 00000610  83 3D 00000D05 R	cmp licznik1,0
	   00
 00000617  74 02		je @F
 00000619  EB 46		jmp dalej
 0000061B			@@:
 0000061B  C7 05 00000D05 R	mov licznik1,8
	   00000008
				invoke wsprintfA,offset buf,offset format1,liczba
 0000063D  A3 0000131F R	mov rsymb,eax
				invoke WriteFile, hfile2, offset buf ,rsymb , offset nbytes, 0
 0000065F  EB 00		jmp dalej
 00000661			dalej:
 00000661  59			pop ecx
 00000662  E2 02		loop @F
 00000664  EB 05		jmp zamyk
 00000666			@@:
 00000666  E9 FFFFFEFF		jmp powt2
 0000066B			zamyk:
				invoke CloseHandle, hfile
				invoke CloseHandle, hfile1
				invoke CloseHandle, hfile2
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				invoke lstrlenA, offset nazwat1
 00000696  A3 00000F0D R	mov leng, eax
				invoke WriteConsoleA, hout, offset nazwat1, leng , offset rout , 0
				;------------------------------|
				;       plik "test1.txt"       |
				;------------------------------|
				invoke CreateFileA, offset tesTxt1,GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0 ; plik test1.txt
 000006D1  A3 00000B65 R	mov hfile1, eax
 000006D6  C7 05 00000D05 R	mov licznik1,0
	   00000000
 000006E0			powtE1:
				invoke ReadFile, hfile1, offset buf ,6 , offset nbytes, 0 ;;
 000006F9  83 3D 00000CFD R	cmp nbytes,0
	   00
 00000700  75 02		jnz @F
 00000702  EB 56		jmp zamyk1
 00000704			@@:
 00000704  83 3D 00000D05 R	cmp licznik1,0
	   00
 0000070B  75 19		jnz @F
				;--- new line ---------
				nowalinia nl, 2		;   MAKRO
 0000070D  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000070F  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000714  6A 02	     1		push	2		        ; iloœæ znaków
 00000716  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 0000071B  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000721  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 00000726			@@:
 00000726  FF 05 00000D05 R	inc licznik1
 0000072C  83 3D 00000D05 R	cmp licznik1,10
	   0A
 00000733  72 0A		jb @F
 00000735  C7 05 00000D05 R	mov licznik1,0
	   00000000
 0000073F			@@:
				invoke WriteConsoleA, hout, offset buf ,4, offset nbytes, 0
 00000758  EB 86		jmp powtE1
 0000075A			zamyk1:
				invoke CloseHandle, hfile1
				;--- new line ---------
				nowalinia nl, 2		;   MAKRO
 00000765  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000767  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000076C  6A 02	     1		push	2		        ; iloœæ znaków
 0000076E  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000773  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000779  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				invoke lstrlenA, offset nazwat2
 00000788  A3 00000F0D R	mov leng, eax
				invoke WriteConsoleA, hout, offset nazwat2, leng , offset rout , 0
				;------------------------------|
				;       plik "test2.txt"       |
				;------------------------------|
				invoke CreateFileA, offset tesTxt2,GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0 ; plik test2.txt
 000007C3  A3 00000B65 R	mov hfile1, eax
 000007C8  C7 05 00000D05 Rmov licznik1,0
	   00000000
 000007D2			powtE2:
				invoke ReadFile, hfile2, offset buf ,6 , offset nbytes, 0 ;;
 000007EB  83 3D 00000CFD R	cmp nbytes,0
	   00
 000007F2  75 02		jnz @F
 000007F4  EB 56		jmp zamyk2
 000007F6			@@:
 000007F6  83 3D 00000D05 R	cmp licznik1,0
	   00
 000007FD  75 19		jnz @F
				;--- new line ---------
				nowalinia nl, 2		;   MAKRO
 000007FF  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000801  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000806  6A 02	     1		push	2		        ; iloœæ znaków
 00000808  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 0000080D  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000813  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 00000818			@@:
 00000818  FF 05 00000D05 R	inc licznik1
 0000081E  83 3D 00000D05 R	cmp licznik1,10
	   0A
 00000825  72 0A		jb @F
 00000827  C7 05 00000D05 R	mov licznik1,0
	   00000000
 00000831			@@:
				invoke WriteConsoleA, hout, offset buf ,4, offset nbytes, 0
 0000084A  EB 86		jmp powtE2
 0000084C			zamyk2:
				invoke CloseHandle, hfile2
				;--- new line ---------
				nowalinia nl, 2		;   MAKRO
 00000857  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000859  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000085E  6A 02	     1		push	2		        ; iloœæ znaków
 00000860  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000865  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000086B  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000870			kon:
				;----- wywo³anie funkcji ExitProcess ---------
				invoke ExitProcess,0
				;==================================
				;=== Podprogramy ==================
				;==================================
 00000877 00000877		ScanInt PROC C adres
				;; funkcja ScanInt przekszta³ca ci¹g cyfr do liczby, któr¹ jest zwracana przez eax
				;; argument - zakoñczony zerem wiersz z cyframi
				;; rejestry: ebx - adres wiersza, EDX - znak liczby, ESI - indeks cyfry w wierszu, EDI - tymczasowy
				;--- pocz¹tek funkcji
				;--- odk³adanie na stos
 0000087A  53			push ebx
 0000087B  51			push ecx
 0000087C  52			push EDX
 0000087D  56			push ESI
 0000087E  57			push EDI
				;--- przygotowywanie cyklu
				invoke lstrlenA, adres
 00000887  8B F8		mov EDI, eax ;iloœæ znaków
 00000889  8B C8		mov ecx, eax ;iloœæ powtórzeñ = iloœæ znaków
 0000088B  33 F6		xor ESI, ESI ; wyzerowanie ESI
 0000088D  33 D2		xor EDX, EDX ; wyzerowanie EDX
 0000088F  33 C0		xor eax, eax ; wyzerowanie eax
 00000891  8B 5D 08		mov ebx, adres
				;--- cykl --------------------------
 00000894  80 3C 1E 2D		pocz: cmp BYTE PTR [ebx+ESI], 02Dh ;porównanie z kodem '-'
 00000898  75 07		jne @F
 0000089A  BA 00000001		mov EDX, 1
 0000089F  EB 24		jmp nast
 000008A1  80 3C 1E 30		@@: cmp BYTE PTR [ebx+ESI], 030h ;porównanie z kodem '0'
 000008A5  73 02		jae @F
 000008A7  EB 1C		jmp nast
 000008A9  80 3C 1E 39		@@: cmp BYTE PTR [ebx+ESI], 039h ;porównanie z kodem '9'
 000008AD  76 02		jbe @F
 000008AF  EB 14		jmp nast
				;----
 000008B1  52			@@: push EDX ; do EDX procesor mo¿e zapisaæ wynik mno¿enia
 000008B2  BF 0000000A		mov EDI, 10
 000008B7  F7 E7		mul EDI ;mno¿enie eax * EDI
 000008B9  8B F8		mov EDI, eax ; tymczasowo z eax do EDI
 000008BB  33 C0		xor eax, eax ;zerowani eax
 000008BD  8A 04 1E		mov AL, BYTE PTR [ebx+ESI]
 000008C0  2C 30		sub AL, 030h ; korekta: cyfra = kod znaku - kod '0'
 000008C2  03 C7		add eax, EDI ; dodanie cyfry
 000008C4  5A			pop EDX
 000008C5  46			nast: inc ESI
 000008C6  49			dec ecx
 000008C7  74 02		jz @F
 000008C9  EB C9		jmp pocz
				;--- wynik
 000008CB  0B D2		@@: or EDX, EDX ;analiza znacznika EDX
 000008CD  74 02		jz @F
 000008CF  F7 D8		neg eax
 000008D1			@@:
				;--- zdejmowanie ze stosu
 000008D1  5F			pop EDI
 000008D2  5E			pop ESI
 000008D3  5A			pop EDX
 000008D4  59			pop ecx
 000008D5  5B			pop ebx
				;--- powrót
				ret
 000008D8			ScanInt ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000008D8			_text ends
				end start
				;----------------------------------------|
				;    Koniec segmentu kodu                |
				;----------------------------------------|
Microsoft (R) Macro Assembler Version 6.14.8444		    04/29/20 21:36:31
.\cw7\cw7.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

Naglowek . . . . . . . . . . . .	Proc
nowalinia  . . . . . . . . . . .	Proc
plznaki  . . . . . . . . . . . .	Proc
podajdeskr . . . . . . . . . . .	Proc
wyswietl . . . . . . . . . . . .	Proc
zadA . . . . . . . . . . . . . .	Proc
zadB . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00001323 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008D8 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$00001 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000877 Private STDCALL
  losowe . . . . . . . . . . . .	L Near	 00000227 _TEXT	
  powt . . . . . . . . . . . . .	L Near	 00000281 _TEXT	
  powtE  . . . . . . . . . . . .	L Near	 000002E0 _TEXT	
  powt2  . . . . . . . . . . . .	L Near	 0000056A _TEXT	
  parz . . . . . . . . . . . . .	L Near	 0000060A _TEXT	
  dalej  . . . . . . . . . . . .	L Near	 00000661 _TEXT	
  zamyk  . . . . . . . . . . . .	L Near	 0000066B _TEXT	
  powtE1 . . . . . . . . . . . .	L Near	 000006E0 _TEXT	
  zamyk1 . . . . . . . . . . . .	L Near	 0000075A _TEXT	
  powtE2 . . . . . . . . . . . .	L Near	 000007D2 _TEXT	
  zamyk2 . . . . . . . . . . . .	L Near	 0000084C _TEXT	
  kon  . . . . . . . . . . . . .	L Near	 00000870 _TEXT	
CharToOemA . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CopyFileA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateDirectoryA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCurrentDirectoryA . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ScanInt  . . . . . . . . . . . .	P Near	 00000877 _TEXT	Length= 00000061 Public C
  adres  . . . . . . . . . . . .	DWord	 bp + 00000008
  pocz . . . . . . . . . . . . .	L Near	 00000894 _TEXT	
  nast . . . . . . . . . . . . .	L Near	 000008C5 _TEXT	
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrcatA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrcpyA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrlenA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
nrandom  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_HIddEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_FLAG_BACKUP_SEMANTICS . . .	Number	 02000000h   
FILE_FLAG_DELETE_ON_CLOSE  . . .	Number	 04000000h   
FILE_FLAG_NO_BUFFERING . . . . .	Number	 20000000h   
FILE_FLAG_OVERLAPPED . . . . . .	Number	 40000000h   
FILE_FLAG_POSIX_SEMANTICS  . . .	Number	 01000000h   
FILE_FLAG_RANDOM_ACCESS  . . . .	Number	 10000000h   
FILE_FLAG_SEQUENTIAL_SCAN  . . .	Number	 08000000h   
FILE_FLAG_WRITE_THROUGH  . . . .	Number	 -80000000h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_ARGUMENT_ARRAY  .	Number	 00002000h   
FORMAT_MESSAGE_FROM_HMODULE  . .	Number	 00000800h   
FORMAT_MESSAGE_FROM_STRING . . .	Number	 00000400h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FORMAT_MESSAGE_IGNORE_INSERTS  .	Number	 00000200h   
FORMAT_MESSAGE_MAX_WIDTH_MASK  .	Number	 000000FFh   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
buff . . . . . . . . . . . . . .	Byte	 00001111 _DATA	
bufor  . . . . . . . . . . . . .	Byte	 00000D0D _DATA	
buf  . . . . . . . . . . . . . .	Byte	 00000F11 _DATA	
dalej  . . . . . . . . . . . . .	L Near	 00000661 _TEXT	
format1  . . . . . . . . . . . .	Byte	 00001311 _DATA	
format2  . . . . . . . . . . . .	Byte	 00001319 _DATA	
hfile1 . . . . . . . . . . . . .	DWord	 00000B65 _DATA	
hfile2 . . . . . . . . . . . . .	DWord	 00000B69 _DATA	
hfile  . . . . . . . . . . . . .	DWord	 00000B61 _DATA	
hout . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
katDane  . . . . . . . . . . . .	Byte	 00000961 _DATA	
kon  . . . . . . . . . . . . . .	L Near	 00000870 _TEXT	
leng . . . . . . . . . . . . . .	DWord	 00000F0D _DATA	
liczba . . . . . . . . . . . . .	DWord	 00000D01 _DATA	
licznik1 . . . . . . . . . . . .	DWord	 00000D05 _DATA	
licznik2 . . . . . . . . . . . .	DWord	 00000D09 _DATA	
losowe . . . . . . . . . . . . .	L Near	 00000227 _TEXT	
mbuf . . . . . . . . . . . . . .	Number	 00000200h   
naglow . . . . . . . . . . . . .	Byte	 0000000E _DATA	
nazwa1 . . . . . . . . . . . . .	Byte	 000002FC _DATA	
nazwa2 . . . . . . . . . . . . .	Byte	 00000307 _DATA	
nazwaDANE  . . . . . . . . . . .	Byte	 000002EC _DATA	
nazwat1  . . . . . . . . . . . .	Byte	 00000312 _DATA	
nazwat2  . . . . . . . . . . . .	Byte	 0000033B _DATA	
nazwa  . . . . . . . . . . . . .	Byte	 000002F2 _DATA	
nbytes . . . . . . . . . . . . .	DWord	 00000CFD _DATA	
nl2  . . . . . . . . . . . . . .	Byte	 00000007 _DATA	
nl . . . . . . . . . . . . . . .	Byte	 00000004 _DATA	
nxt  . . . . . . . . . . . . . .	Byte	 0000000B _DATA	
opisKatZadA2 . . . . . . . . . .	Byte	 00000078 _DATA	
opisKatZadA  . . . . . . . . . .	Byte	 00000048 _DATA	
opisKatZadB  . . . . . . . . . .	Byte	 000000B8 _DATA	
parz . . . . . . . . . . . . . .	L Near	 0000060A _TEXT	
powt2  . . . . . . . . . . . . .	L Near	 0000056A _TEXT	
powtE1 . . . . . . . . . . . . .	L Near	 000006E0 _TEXT	
powtE2 . . . . . . . . . . . . .	L Near	 000007D2 _TEXT	
powtE  . . . . . . . . . . . . .	L Near	 000002E0 _TEXT	
powt . . . . . . . . . . . . . .	L Near	 00000281 _TEXT	
rout . . . . . . . . . . . . . .	DWord	 000000E8 _DATA	
rozmA  . . . . . . . . . . . . .	DWord	 00000044 _DATA	
rozmB  . . . . . . . . . . . . .	DWord	 000000B4 _DATA	
rozmN  . . . . . . . . . . . . .	DWord	 00000034 _DATA	
rozmkatzadB  . . . . . . . . . .	DWord	 000000E4 _DATA	
rozmkatzada2 . . . . . . . . . .	DWord	 000000A4 _DATA	
rozmkatzada  . . . . . . . . . .	DWord	 00000074 _DATA	
rsymb  . . . . . . . . . . . . .	DWord	 0000131F _DATA	
sciezka  . . . . . . . . . . . .	Byte	 000000EC _DATA	
start  . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public STDCALL
tab  . . . . . . . . . . . . . .	DWord	 00000B6D _DATA	
tesTxt1  . . . . . . . . . . . .	Byte	 00000561 _DATA	
tesTxt2  . . . . . . . . . . . .	Byte	 00000761 _DATA	
tesTxt . . . . . . . . . . . . .	Byte	 00000361 _DATA	
zadanieA . . . . . . . . . . . .	Byte	 00000038 _DATA	
zadanieB . . . . . . . . . . . .	Byte	 000000A8 _DATA	
zamyk1 . . . . . . . . . . . . .	L Near	 0000075A _TEXT	
zamyk2 . . . . . . . . . . . . .	L Near	 0000084C _TEXT	
zamyk  . . . . . . . . . . . . .	L Near	 0000066B _TEXT	

	   0 Warnings
	   0 Errors
