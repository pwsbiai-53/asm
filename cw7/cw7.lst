Microsoft (R) Macro Assembler Version 6.14.8444		    04/29/20 12:13:28
.\cw7\cw7.asm						     Page 1 - 1


				;-------------------------------------------|
				;				  cw7.asm                   |
				;      Operacje na plikach i katalogach.    |
				;                                           |
				;	               Autor: Grzegorz Makowski |
				;                  MASM ver: 6.14.8444      |
				;                  ost. akt. 29.04.2020     |
				;-------------------------------------------|
				.586p
				.model flat, stdcall
				;-------------------------------------------|
				;     wczytanie plikow zewnetrznych         |
				;-------------------------------------------| 
				;-------------------------------------------|
				;    wczytanie wlasnych makr z pliku        |
				;-------------------------------------------|
				include mojemakra.mac	; Makra
			      C ;-------------------------------------------|
			      C ;				  mojemakra.mac             |
			      C ;      Operacje na plikach i katalogach.    |
			      C ;                ver 1.0                    |
			      C ;	               Autor: Grzegorz Makowski |
			      C ;                  MASM ver: 6.14.8444      |
			      C ;                  ost. akt. 28.04.2020     |
			      C ;-------------------------------------------|
			      C ;-------------------------------------------|
			      C ;           Makro do deskyptorow            |
			      C ;-------------------------------------------|
			      C podajdeskr macro handle, deskrypt 
			      C 	push	handle
			      C 	call	GetStdHandle
			      C 	mov	deskrypt,eax ; deskryptor bufora konsoli
			      C endm
			      C 
			      C ;-------------------------------------------|
			      C ;       Konwersja polskich znakow           |
			      C ;     Przyjmuje tab znakowa i bufor         |
			      C ;-------------------------------------------|
			      C plznaki macro text, bufor
			      C 	invoke CharToOemA, addr text, addr bufor
			      C endm
			      C 
			      C ;-------------------------------------------|
			      C ;Wyœwietlanie wyniku- tekstu na ekranie     |
			      C ;  bufor z plznaki lub kazy inny tekst      |
			      C ;-------------------------------------------|
			      C 
			      C wyswietl macro bufor, rozmiar
			      C 	push 0 ; rezerwa, musi byæ zero
			      C 	push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
			      C 	push rozmiar ; iloœæ znaków
			      C 	push offset bufor ; wska¿nik na tekst w buforze
			      C 	push hout ; deskryptor buforu konsoli
			      C 	call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
			      C endm
			      C 
			      C ;-------------------------------------------|
			      C ;     Makro do robienia odstepu linii       |
			      C ;przyjmuje kod hex nowej linni i ilosc zn.  |
			      C ;-------------------------------------------| 
			      C nowalinia macro nowa, ilznk
			      C 	push	0		        ; rezerwa, musi byæ zero
			      C 	push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
			      C 	push	ilznk		        ; iloœæ znaków
			      C 	push	offset nowa 	; wska¿nik na tekst
			      C 	push	hout		    ; deskryptor buforu konsoli
			      C 	call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
			      C endm
			      C 
				;-------------------------------------------|
				;      bilioteki systemowe i masm           |
				;-------------------------------------------|
				includelib .\lib\user32.lib
				includelib .\lib\kernel32.lib
				includelib .\lib\masm32.lib
				;-------------------------------------------|
				;    stale z pliku .\include\windows.inc    |
				;-------------------------------------------|
 =-0000000A			STD_INPUT_HANDLE equ -10
 =-0000000B			STD_OUTPUT_HANDLE equ -11
				;-------------------------------------------|
				;			stale do obslugi plikow	        |
				;-------------------------------------------|
 = 80000000			GENERIC_READ equ 80000000h
 = 40000000			GENERIC_WRITE equ 40000000h
 = 00000001			CREATE_NEW equ 1
 = 00000002			CREATE_ALWAYS equ 2
 = 00000003			OPEN_EXISTING equ 3
 = 00000004			OPEN_ALWAYS equ 4
 = 00000005			TRUNCATE_EXISTING equ 5
 = 80000000			FILE_FLAG_WRITE_THROUGH equ 80000000h
 = 40000000			FILE_FLAG_OVERLAPPED equ 40000000h
 = 20000000			FILE_FLAG_NO_BUFFERING equ 20000000h
 = 10000000			FILE_FLAG_RANDOM_ACCESS equ 10000000h
 = 08000000			FILE_FLAG_SEQUENTIAL_SCAN equ 8000000h
 = 04000000			FILE_FLAG_DELETE_ON_CLOSE equ 4000000h
 = 02000000			FILE_FLAG_BACKUP_SEMANTICS equ 2000000h
 = 01000000			FILE_FLAG_POSIX_SEMANTICS equ 1000000h
 = 00000001			FILE_ATTRIBUTE_READONLY equ 1h
 = 00000002			FILE_ATTRIBUTE_HIddEN equ 2h
 = 00000004			FILE_ATTRIBUTE_SYSTEM equ 4h
 = 00000010			FILE_ATTRIBUTE_DIRECTORY equ 10h
 = 00000020			FILE_ATTRIBUTE_ARCHIVE equ 20h
 = 00000080			FILE_ATTRIBUTE_NORMAL equ 80h
 = 00000100			FILE_ATTRIBUTE_TEMPORARY equ 100h
 = 00000800			FILE_ATTRIBUTE_COMPRESSED equ 800h
 = 00000100			FORMAT_MESSAGE_ALLOCATE_BUFFER equ 100h
 = 00000200			FORMAT_MESSAGE_IGNORE_INSERTS equ 200h
 = 00000400			FORMAT_MESSAGE_FROM_STRING equ 400h
 = 00000800			FORMAT_MESSAGE_FROM_HMODULE equ 800h
 = 00001000			FORMAT_MESSAGE_FROM_SYSTEM equ 1000h
 = 00002000			FORMAT_MESSAGE_ARGUMENT_ARRAY equ 2000h
 = 000000FF			FORMAT_MESSAGE_MAX_WIDTH_MASK equ 0FFh
				;--------------------------------|
				;            stale               |
				;--------------------------------|
 = 00000200			mbuf = 512
				;--- funkcje API Win32 z pliku .\include\user32.inc ---
				CharToOemA proto :dword,:dword
				;--- z pliku .\include\kernel32.inc ---
				GetStdHandle proto :dword
				ReadConsoleA proto :dword,:dword,:dword,:dword,:dword
				WriteConsoleA proto :dword,:dword,:dword,:dword,:dword
				ExitProcess proto :dword
				wsprintfA proto c :vararg
				;; int wsprintf(LPTSTR lpOut,// pointer to buffer for output
				;; LPCTSTR lpFmt,// pointer to format-control string
				;; ... // optional arguments );
				lstrlenA proto :dword
				GetCurrentDirectoryA proto :dword,:dword
				;;nBufferLength, lpBuffer; zwraca length
				CreateDirectoryA proto :dword,:dword
				;;lpPathName, lpSecurityAttributes; zwraca 0 jeœli b³ad
				lstrcatA proto :dword,:dword
				;; lpString1, lpString2; zwraca lpString1
				CreateFileA proto :dword,:dword,:dword,:dword,:dword,:dword,:dword
				;; LPCTSTR lpszName, DWORD fdwAccess,
				;; DWORD fdwShareMode, LPSECURITY_ATTRIBUTES lpsa, DWORD fdwCreate,
				;; DWORD fdwAttrsAndFlags, HANDLE hTemplateFile
				lstrcpyA proto :dword,:dword
				;;LPTSTR lpString1 // address of buffer, LPCTSTR lpString2 // address of string to copy
				CloseHandle proto :dword
				;; BOOL CloseHandle(HANDLE hObject)
				WriteFile proto :dword,:dword,:dword,:dword,:dword
				;; BOOL WriteFile(
				;; HANDLE hFile, // handle to file to write to
				;; LPCVOID lpBuffer, // pointer to data to write to file
				;; DWORD nNumberOfBytesToWrite, // number of bytes to write
				;; LPDWORD lpNumberOfBytesWritten, // pointer to number of bytes written
				;; LPOVERLAPPED lpOverlapped // pointer to structure needed for overlapped I/O
				;;);
				ReadFile proto :dword,:dword,:dword,:dword,:dword
				;;BOOL ReadFile(
				;;HANDLE hFile, // handle of file to read
				;;LPVOID lpBuffer, // address of buffer that receives data
				;;DWORD nNumberOfBytesToRead, // number of bytes to read
				;;LPDWORD lpNumberOfBytesRead, // address of number of bytes read
				;;LPOVERLAPPED lpOverlapped // address of structure for data
				;;);
				CopyFileA proto :dword,:dword,:dword
				;; BOOL CopyFile(
				;;LPCTSTR lpExistingFileName, // pointer to name of an existing file
				;;LPCTSTR lpNewFileName, // pointer to filename to copy to
				;;BOOL bFailIfExists // flag for operation if file exists
				;;);
				GetLastError proto
				;--- z pliku .\include\masm32.inc ---
				nrandom proto :dword
				;--- funkcje
				ScanInt proto C adres:dword

				;----------------------------------------|
				;    Poczatek segmentu danych            |
				;----------------------------------------|
 00000000			_data segment
 00000000 00000000		hout dd 0
 00000004 0D 0A 00		nl db 0Dh, 0Ah, 0	; nowa linia
 00000007 0D 0A 20 00		nl2	db 0Dh,0Ah,20h,0 ; nowa inne formatowanie
 0000000B 41 75 74 6F 72	naglow db "Autor aplikacji Grzegorz Makowski i53",0
	   20 61 70 6C 69
	   6B 61 63 6A 69
	   20 47 72 7A 65
	   67 6F 72 7A 20
	   4D 61 6B 6F 77
	   73 6B 69 20 69
	   35 33 00
				align 4 ; przesuniecie do adresu podzielnego na 4
 00000034 00000029		rozmN dd $ - naglow ;iloœæ znaków w tablicy
 00000038 5A 61 64 61 6E	zadanieA db "Zadanie a",0
	   69 65 20 61 00
				align 4
 00000044 0000000C		rozmA dd $ - zadanieA ; ilosc znakow tekstu zadanieA
 00000048 8C 63 69 65 7A	opisKatZadA db "Œciezki do katalogu DANE i pliku test.txt.",0
	   6B 69 20 64 6F
	   20 6B 61 74 61
	   6C 6F 67 75 20
	   44 41 4E 45 20
	   69 20 70 6C 69
	   6B 75 20 74 65
	   73 74 2E 74 78
	   74 2E 00
				align 4
 00000074 0000002C		rozmkatzada dd $ - opisKatZadA ; ilosc znakow w opisie zadania a
				align 4
 00000078 57 79 9C 77 69	opisKatZadA2 db "Wyœwietlenie losowej zawrtoœci pliku test.",0
	   65 74 6C 65 6E
	   69 65 20 6C 6F
	   73 6F 77 65 6A
	   20 7A 61 77 72
	   74 6F 9C 63 69
	   20 70 6C 69 6B
	   75 20 74 65 73
	   74 2E 00
				align 4
 000000A4 0000002C		rozmkatzada2 dd $ - opisKatZadA2 ; ilosc znakow w opisie zadania a
 000000A8 5A 61 64 61 6E	zadanieB db "Zadanie b",0
	   69 65 20 62 00
				align 4
 000000B4 0000000C		rozmB dd $ - zadanieB ; ilosc znakow tekstu zadanieB
				align 4
 000000B8 8C 63 69 65 7A	opisKatZadB db "Œciezki do plików: test1.txt i test2.txt.",0
	   6B 69 20 64 6F
	   20 70 6C 69 6B
	   F3 77 3A 20 74
	   65 73 74 31 2E
	   74 78 74 20 69
	   20 74 65 73 74
	   32 2E 74 78 74
	   2E 00
				align 4
 000000E4 0000002C		rozmkatzadB dd $ - opisKatZadB ; ilosc znakow w opisie zadania a
				align 4
 000000E8 00000000		rout dd 0
 000000EC  00000200 [		sciezka db mbuf dup(?)
	    00
	   ]
 000002EC 00000000		lenDANE dd 0
 000002F0 5C 44 41 4E 45	nazwaDANE db "\DANE",0
	   00
 000002F6 5C 74 65 73 74	nazwa db "\test.txt",0
	   2E 74 78 74 00
 00000300 5C 74 65 73 74	nazwa1 db "\test1.txt",0
	   31 2E 74 78 74
	   00
 0000030B 5C 74 65 73 74	nazwa2 db "\test2.txt",0
	   32 2E 74 78 74
	   00
 00000316 0D 0A 44 61 6E	nazwat1 db 13,10,"Dane z test1.txt - co osma nieparzysta:",13,10,0
	   65 20 7A 20 74
	   65 73 74 31 2E
	   74 78 74 20 2D
	   20 63 6F 20 6F
	   73 6D 61 20 6E
	   69 65 70 61 72
	   7A 79 73 74 61
	   3A 0D 0A 00
 00000342 0D 0A 44 61 6E	nazwat2 db 13,10,"Dane z test2.txt - co osma parzysta:",13,10,0
	   65 20 7A 20 74
	   65 73 74 32 2E
	   74 78 74 20 2D
	   20 63 6F 20 6F
	   73 6D 61 20 70
	   61 72 7A 79 73
	   74 61 3A 0D 0A
	   00
 0000036B  00000200 [		tesTxt db mbuf dup(?)	; bufor na sciezke dla pliku test.txt
	    00
	   ]
 0000056B  00000200 [		tesTxt1 db mbuf dup(?)	; bufor na sciezke dla pliku test1.txt
	    00
	   ]
 0000076B  00000200 [		tesTxt2 db mbuf dup(?)	; bufor na sciezke dla pliku test2.txt
	    00
	   ]
 0000096B  00000200 [		katDane db mbuf dup(?)	; bufor katalogu
	    00
	   ]
 00000B6B 00000000		hfile dd 0				; uchwyt do pliku test
 00000B6F 00000000		hfile1 dd 0				; uchwyt do pliku test1
 00000B73 00000000		hfile2 dd 0				; uchwyt do pliku test2
 00000B77  00000064 [		tab dd 100 dup(0)
	    00000000
	   ]
 00000D07 00000000		nbytes dd 0
 00000D0B 00000000		liczba dd 0
 00000D0F 00000000		licznik1 dd 0
 00000D13 00000000		licznik2 dd 0
 00000D17 0D 0A 00		nastwiersz db 13,10,0
 00000D1A  00000200 [		bufor db mbuf dup(0)
	    00
	   ]
 00000F1A 00000000		leng dd 0
 00000F1E  00000200 [		buf db mbuf dup(0)		; bufor pomocniczy
	    00
	   ]
 0000111E  00000200 [		buff db mbuf dup(0)		; bufor pomocniczy
	    00
	   ]
 0000131E 20 25 33 6C 64	format1 db " %3ld",13,10,0
	   0D 0A 00
 00001326 20 25 33 6C 64	format2 db " %3ld",0
	   00
 0000132C 00000000		rsymb dd 0
 00001330			_data ends
				;----------------------------------------|
				;    Koniec segmentu danych              |
				;----------------------------------------|

				;----------------------------------------|
				;    Poczatek segmentu kodu              |
				;----------------------------------------|
 00000000			_text segment
 00000000			start:
 00000000			;--- wywo³anie funkcji GetStdHandle - MAKRO
				podajdeskr STD_OUTPUT_HANDLE, hout		; MAKRO
 00000000  6A F5	     1		push	STD_OUTPUT_HANDLE
 00000002  E8 00000000 E     1		call	GetStdHandle
 00000007  A3 00000000 R     1		mov	hout,eax ; deskryptor bufora konsoli
				;--- nag³ówek ---------
				plznaki naglow, buf ; konwersja - MAKRO
				;--- wyœwietlenie  powitania ---------
				wyswietl buf, rozmN ; wyswietlenie - MAKRO
 0000001B  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 0000001D  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000022  FF 35 00000034 R  1		push rozmN ; iloœæ znaków
 00000028  68 00000F1E R     1		push offset buf ; wska¿nik na tekst w buforze
 0000002D  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000033  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				nowalinia nl, 2		; nowa linia - MAKRO
 00000038  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000003A  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000003F  6A 02	     1		push	2		        ; iloœæ znaków
 00000041  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000046  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000004C  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				nowalinia nl, 2		; nowa linia - MAKRO
 00000051  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000053  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000058  6A 02	     1		push	2		        ; iloœæ znaków
 0000005A  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 0000005F  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000065  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;--- wywietlenie tekstu Zadanie a ----
				plznaki zadanieA, buff		; MAKRO
				wyswietl buff, rozmA		; wyswietlenie - MAKRO
 00000079  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 0000007B  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000080  FF 35 00000044 R  1		push rozmA ; iloœæ znaków
 00000086  68 0000111E R     1		push offset buff ; wska¿nik na tekst w buforze
 0000008B  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000091  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				nowalinia nl, 2		; nowa linia - MAKRO
 00000096  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000098  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000009D  6A 02	     1		push	2		        ; iloœæ znaków
 0000009F  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000000A4  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000000AA  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				invoke GetCurrentDirectoryA, mbuf, offset sciezka ; pobranie pe³nej œcie¿ki
				nowalinia nl, 2		; MAKRO
 000000BE  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000000C0  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000000C5  6A 02	     1		push	2		        ; iloœæ znaków
 000000C7  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000000CC  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000000D2  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				invoke lstrcpyA, offset katDane, offset sciezka ; ³aczenie stringow
				invoke lstrcatA, offset katDane, offset nazwaDANE
				invoke lstrlenA, offset katDane
 000000FF  A3 000002EC R	mov lenDANE,eax
 00000104  A3 00000F1A R	mov leng, eax
				;--- 
				plznaki opisKatZadA, buf		; MAKRO 
				wyswietl buf, rozmkatzada	; wyswietlenie opisu zadania - MAKRO
 00000118  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 0000011A  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 0000011F  FF 35 00000074 R  1		push rozmkatzada ; iloœæ znaków
 00000125  68 00000F1E R     1		push offset buf ; wska¿nik na tekst w buforze
 0000012A  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000130  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;--- nowa linia
				nowalinia nl, 2		; nowa linia - MAKRO
 00000135  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000137  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000013C  6A 02	     1		push	2		        ; iloœæ znaków
 0000013E  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000143  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000149  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				wyswietl offset katDane, leng ; wyswietlenie pe³nego katalogu DANE - MAKRO
 0000014E  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 00000150  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000155  FF 35 00000F1A R  1		push leng ; iloœæ znaków
 0000015B  68 0000096B R     1		push offset offset katDane ; wska¿nik na tekst w buforze
 00000160  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000166  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;--- nowa linia
				nowalinia nl, 2		; nowa linia - MAKRO
 0000016B  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000016D  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000172  6A 02	     1		push	2		        ; iloœæ znaków
 00000174  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000179  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000017F  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				invoke CreateDirectoryA, offset katDane , 0 ; utworzenie katalogu
				invoke lstrcpyA, offset tesTxt, offset katDane
				invoke lstrcatA, offset tesTxt, offset nazwa
				invoke lstrlenA, offset tesTxt
 000001B8  A3 00000F1A R	mov leng, eax
				wyswietl offset tesTxt, leng ; MAKRO - wyswietlenie sciezki do pliku test.txt
 000001BD  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 000001BF  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000001C4  FF 35 00000F1A R  1		push leng ; iloœæ znaków
 000001CA  68 0000036B R     1		push offset offset tesTxt ; wska¿nik na tekst w buforze
 000001CF  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 000001D5  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;-- nowa linia
				nowalinia nl, 2		; nowa linia - MAKRO
 000001DA  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000001DC  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000001E1  6A 02	     1		push	2		        ; iloœæ znaków
 000001E3  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000001E8  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000001EE  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				invoke CreateFileA, offset tesTxt,GENERIC_WRITE , 0, 0, CREATE_ALWAYS, 0, 0 ; tworzenie pliku
 0000020C  A3 00000B6B R	mov hfile, eax
				;---
				invoke CloseHandle, hfile
				;--- liczby pseudolosowe -> tablica
 0000021C  8D 1D 00000B77 R	lea ebx, tab
 00000222  BF 00000000		mov edi, 0
 00000227  B9 00000064		mov ecx, 100
 0000022C			losowe:
 0000022C  51			push ecx
 0000022D  53			push ebx
				;;;
				invoke nrandom, 200
 00000238  83 E8 63		sub eax, 99
				;;;
 0000023B  5B			pop ebx
 0000023C  89 03		mov dword ptr [ebx], eax
 0000023E  83 C3 04		add ebx, 4
 00000241  59			pop ecx
 00000242  E2 E8		loop losowe
				;------------------------------|
				;       plik "test.txt"        |
				;------------------------------|
				;--- nowa linia
				nowalinia nl,2
 00000244  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000246  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000024B  6A 02	     1		push	2		        ; iloœæ znaków
 0000024D  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000252  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000258  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				plznaki opisKatZadA2, buf ; konwersja pl nazkow
				wyswietl buf, rozmkatzada2 ; wyswietenie opisu tabeli
 0000026C  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 0000026E  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000273  FF 35 000000A4 R  1		push rozmkatzada2 ; iloœæ znaków
 00000279  68 00000F1E R     1		push offset buf ; wska¿nik na tekst w buforze
 0000027E  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000284  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;--- nowa linia
				nowalinia nl,2
 00000289  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000028B  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000290  6A 02	     1		push	2		        ; iloœæ znaków
 00000292  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000297  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000029D  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				invoke CreateFileA, offset tesTxt,GENERIC_READ OR GENERIC_WRITE , 0, 0, OPEN_EXISTING, 0, 0 ; tworzenie pliku
 000002BB  A3 00000B6B R	mov hfile, eax
				;-- z tablicy do pliku ----
 000002C0  8D 1D 00000B77 R	lea ebx, tab
 000002C6  B9 00000064		mov ecx, 100
 000002CB			powt:
 000002CB  51			push ecx
 000002CC  53			push ebx
				invoke wsprintfA,offset buf,offset format1,dword ptr [ebx]
 000002E1  A3 0000132C R	mov rsymb,eax
				invoke WriteFile, hfile, offset buf ,rsymb , offset nbytes, 0
 00000303  5B			pop ebx
 00000304  83 C3 04		add ebx, 4
 00000307  59			pop ecx
 00000308  E2 C1		loop powt
				;;;
				invoke CloseHandle, hfile
				;-- pobranie z tablicy na ekran po 10 liczb na wierszu ----
 00000315  8D 1D 00000B77 R	lea ebx, tab
 0000031B  B9 00000064		mov ecx, 100
 00000320  C7 05 00000D0F R	mov licznik1,0
	   00000000
 0000032A			powtE:
 0000032A  51			push ecx
 0000032B  53			push ebx
 0000032C  A1 00000D0F R	mov eax,licznik1
 00000331  0B C0		or eax,eax
 00000333  75 19		jnz @F
				;--- nowa line ---------
				nowalinia nl,2 ; wywo³anie MAKRA
 00000335  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000337  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000033C  6A 02	     1		push	2		        ; iloœæ znaków
 0000033E  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000343  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000349  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 0000034E			@@:
 0000034E  FF 05 00000D0F R	inc licznik1
 00000354  83 3D 00000D0F R	cmp licznik1,10
	   0A
 0000035B  72 0A		jb @F
 0000035D  C7 05 00000D0F R	mov licznik1,0
	   00000000
 00000367			@@:
 00000367  5B			pop ebx
 00000368  53			push ebx
				invoke wsprintfA,offset buf,offset format2,dword ptr [ebx]
 0000037D  A3 0000132C R	mov rsymb,eax
				invoke WriteConsoleA, hout, offset buf ,rsymb , offset nbytes, 0
				;;;
 0000039F  5B			pop ebx
 000003A0  83 C3 04		add ebx, 4
 000003A3  59			pop ecx
 000003A4  E2 84		loop powtE
				nowalinia nl,2 ; wywo³anie MAKRA
 000003A6  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000003A8  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000003AD  6A 02	     1		push	2		        ; iloœæ znaków
 000003AF  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000003B4  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000003BA  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				nowalinia nl,2 ; wywo³anie MAKRA
 000003BF  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000003C1  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000003C6  6A 02	     1		push	2		        ; iloœæ znaków
 000003C8  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000003CD  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000003D3  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA

				;----------------------------------|
				;     operacje na plikach          |
				;----------------------------------|
				;-- Zadanie b
				;--- Wyœwietlenie zaprosznie i opisów
				nowalinia nl, 2
 000003D8  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000003DA  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000003DF  6A 02	     1		push	2		        ; iloœæ znaków
 000003E1  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000003E6  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000003EC  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				plznaki zadanieB,buff ; konwersja 
				wyswietl buff, rozmB 
 00000400  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 00000402  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000407  FF 35 000000B4 R  1		push rozmB ; iloœæ znaków
 0000040D  68 0000111E R     1		push offset buff ; wska¿nik na tekst w buforze
 00000412  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000418  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				nowalinia nl, 2
 0000041D  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000041F  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000424  6A 02	     1		push	2		        ; iloœæ znaków
 00000426  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 0000042B  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000431  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				plznaki opisKatZadB, buf
				wyswietl buf, rozmkatzadB
 00000445  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 00000447  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 0000044C  FF 35 000000E4 R  1		push rozmkatzadB ; iloœæ znaków
 00000452  68 00000F1E R     1		push offset buf ; wska¿nik na tekst w buforze
 00000457  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 0000045D  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				nowalinia nl, 2
 00000462  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000464  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000469  6A 02	     1		push	2		        ; iloœæ znaków
 0000046B  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000470  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000476  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;----------------
				invoke CreateFileA, offset tesTxt,GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0 ; plik test.txt
 00000494  A3 00000B6B R	mov hfile, eax
				invoke lstrcpyA, offset tesTxt1, offset katDane
				invoke lstrcatA, offset tesTxt1, offset nazwa1
				invoke lstrlenA, offset tesTxt1
 000004C1  A3 00000F1A R	mov leng, eax
				wyswietl offset tesTxt1, leng 
 000004C6  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 000004C8  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000004CD  FF 35 00000F1A R  1		push leng ; iloœæ znaków
 000004D3  68 0000056B R     1		push offset offset tesTxt1 ; wska¿nik na tekst w buforze
 000004D8  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 000004DE  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;invoke WriteConsoleA, hout, offset tesTxt1, leng , offset rout , 0
				nowalinia nl,2
 000004E3  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000004E5  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000004EA  6A 02	     1		push	2		        ; iloœæ znaków
 000004EC  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000004F1  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000004F7  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				invoke CreateFileA, offset tesTxt1,GENERIC_WRITE , 0, 0, CREATE_ALWAYS, 0, 0 ; stworzenie pliku
 00000515  A3 00000B6F R	mov hfile1, eax
				invoke lstrcpyA, offset tesTxt2, offset katDane
				invoke lstrcatA, offset tesTxt2, offset nazwa2
				invoke lstrlenA, offset tesTxt2
 00000542  A3 00000F1A R	mov leng, eax
				wyswietl offset tesTxt2, leng
 00000547  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 00000549  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 0000054E  FF 35 00000F1A R  1		push leng ; iloœæ znaków
 00000554  68 0000076B R     1		push offset offset tesTxt2 ; wska¿nik na tekst w buforze
 00000559  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 0000055F  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;invoke WriteConsoleA, hout, offset tesTxt2, leng , offset rout , 0
				nowalinia nl,2
 00000564  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000566  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000056B  6A 02	     1		push	2		        ; iloœæ znaków
 0000056D  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000572  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000578  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				invoke CreateFileA, offset tesTxt2,GENERIC_WRITE , 0, 0, CREATE_ALWAYS, 0, 0 ; stworzenie pliku
 00000596  A3 00000B73 R	mov hfile2, eax
				;---------
 0000059B  B9 00000064		mov ecx, 100
 000005A0  C7 05 00000D0F R	mov licznik1,8 ;co osma parzysta
	   00000008
 000005AA  C7 05 00000D13 R	mov licznik2,8 ;co osma nieparzysta
	   00000008
 000005B4			powt2:
 000005B4  51			push ecx
				invoke ReadFile, hfile, offset buf ,6 , offset nbytes, 0 ;;
 000005CE  83 3D 00000D07 R	cmp nbytes,0
	   00
 000005D5  75 05		jnz @F
 000005D7  E9 000000D9		jmp zamyk
 000005DC			@@:
				invoke ScanInt,offset buf ; tekst ASCII -> liczba
 000005E9  A3 00000D0B R	mov liczba,eax
 000005EE  A1 00000D0B R	mov eax,liczba
 000005F3  A9 00000001		test eax,1h
 000005F8  74 5A		jz parz
				;-- nieparzysta
 000005FA  FF 0D 00000D13 R	dec licznik2
 00000600  83 3D 00000D13 R	cmp licznik2,0
	   00
 00000607  74 05		je @F
 00000609  E9 0000009D		jmp dalej
 0000060E			@@:
 0000060E  C7 05 00000D13 R	mov licznik2,8 ; co osma nieparzysta
	   00000008
				invoke wsprintfA,offset buf,offset format1,liczba
 00000630  A3 0000132C R	mov rsymb,eax
				invoke WriteFile, hfile1, offset buf ,rsymb , offset nbytes, 0
 00000652  EB 57		jmp dalej
 00000654			parz:
				;-- parzysta
 00000654  FF 0D 00000D0F R	dec licznik1
 0000065A  83 3D 00000D0F R	cmp licznik1,0
	   00
 00000661  74 02		je @F
 00000663  EB 46		jmp dalej
 00000665			@@:
 00000665  C7 05 00000D0F R	mov licznik1,8 ; co osma parzysta
	   00000008
				invoke wsprintfA,offset buf,offset format1,liczba
 00000687  A3 0000132C R	mov rsymb,eax
				invoke WriteFile, hfile2, offset buf ,rsymb , offset nbytes, 0
 000006A9  EB 00		jmp dalej
 000006AB			dalej:
 000006AB  59			pop ecx
 000006AC  E2 02		loop @F
 000006AE  EB 05		jmp zamyk
 000006B0			@@:
 000006B0  E9 FFFFFEFF		jmp powt2
 000006B5			zamyk:  ; zamkniecie plikow
				invoke CloseHandle, hfile 
				invoke CloseHandle, hfile1
				invoke CloseHandle, hfile2
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				invoke lstrlenA, offset nazwat1
 000006E0  A3 00000F1A R	mov leng, eax
				invoke WriteConsoleA, hout, offset nazwat1, leng , offset rout , 0
				;------------------------------|
				;       plik "test1.txt"       |
				;------------------------------|
				invoke CreateFileA, offset tesTxt1,GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0 ; plik test1.txt
 0000071B  A3 00000B6F R	mov hfile1, eax
 00000720  C7 05 00000D0F R	mov licznik1,0
	   00000000
 0000072A			powtE1:
				invoke ReadFile, hfile1, offset buf ,6 , offset nbytes, 0 ;;
 00000743  83 3D 00000D07 R	cmp nbytes,0
	   00
 0000074A  75 02		jnz @F
 0000074C  EB 56		jmp zamyk1
 0000074E			@@:
 0000074E  83 3D 00000D0F R	cmp licznik1,0
	   00
 00000755  75 19		jnz @F
				;--- nowa linia ---------
				nowalinia nl, 2		;  MAKRO
 00000757  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000759  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000075E  6A 02	     1		push	2		        ; iloœæ znaków
 00000760  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000765  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000076B  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 00000770			@@:
 00000770  FF 05 00000D0F R	inc licznik1
 00000776  83 3D 00000D0F R	cmp licznik1,10
	   0A
 0000077D  72 0A		jb @F
 0000077F  C7 05 00000D0F R	mov licznik1,0
	   00000000
 00000789			@@:
				invoke WriteConsoleA, hout, offset buf ,4, offset nbytes, 0
 000007A2  EB 86		jmp powtE1
 000007A4			zamyk1:; zamkniecie pliku
				invoke CloseHandle, hfile1
				;--- nowa linia ---------
				nowalinia nl, 2		; MAKRO
 000007AF  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000007B1  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000007B6  6A 02	     1		push	2		        ; iloœæ znaków
 000007B8  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000007BD  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000007C3  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				invoke lstrlenA, offset nazwat2
 000007D2  A3 00000F1A R	mov leng, eax
				invoke WriteConsoleA, hout, offset nazwat2, leng , offset rout , 0
				;------------------------------|
				;       plik "test2.txt"       |
				;------------------------------|
				invoke CreateFileA, offset tesTxt2,GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0 ; plik test2.txt
 0000080D  A3 00000B6F R	mov hfile1, eax
 00000812  C7 05 00000D0F R	mov licznik1,0
	   00000000
 0000081C			powtE2:
				invoke ReadFile, hfile2, offset buf ,6 , offset nbytes, 0 ;;
 00000835  83 3D 00000D07 R	cmp nbytes,0
	   00
 0000083C  75 02		jnz @F
 0000083E  EB 56		jmp zamyk2
 00000840			@@:
 00000840  83 3D 00000D0F R	cmp licznik1,0
	   00
 00000847  75 19		jnz @F
				;--- nowa linia ---------
				nowalinia nl, 2		; MAKRO
 00000849  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000084B  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000850  6A 02	     1		push	2		        ; iloœæ znaków
 00000852  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000857  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000085D  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
 00000862			@@:
 00000862  FF 05 00000D0F R	inc licznik1
 00000868  83 3D 00000D0F R	cmp licznik1,10
	   0A
 0000086F  72 0A		jb @F
 00000871  C7 05 00000D0F R	mov licznik1,0
	   00000000
 0000087B			@@:
				invoke WriteConsoleA, hout, offset buf ,4, offset nbytes, 0
 00000894  EB 86		jmp powtE2
 00000896			zamyk2:				; zamkniecie pliku
				invoke CloseHandle, hfile2
				;--- nowa linia ---------
				nowalinia nl, 2		;  MAKRO
 000008A1  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000008A3  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000008A8  6A 02	     1		push	2		        ; iloœæ znaków
 000008AA  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000008AF  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000008B5  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000008BA			kon:
				;----- wywo³anie funkcji ExitProcess ---------
				invoke ExitProcess,0
				;==================================
				;=== Podprogramy ==================
				;==================================
 000008C1 000008C1		ScanInt proc C adres
				;; funkcja ScanInt przekszta³ca ci¹g cyfr do liczby, któr¹ jest zwracana przez eax
				;; argument - zakoñczony zerem wiersz z cyframi
				;; rejestry: ebx - adres wiersza, edx - znak liczby, esi - indeks cyfry w wierszu, edi - tymczasowy
				;--- pocz¹tek funkcji
				;--- odk³adanie na stos
 000008C4  53			push ebx
 000008C5  51			push ecx
 000008C6  52			push edx
 000008C7  56			push esi
 000008C8  57			push edi
				;--- przygotowywanie cyklu
				invoke lstrlenA, adres
 000008D1  8B F8		mov edi, eax ;iloœæ znaków
 000008D3  8B C8		mov ecx, eax ;iloœæ powtórzeñ = iloœæ znaków
 000008D5  33 F6		xor esi, esi ; wyzerowanie esi
 000008D7  33 D2		xor edx, edx ; wyzerowanie edx
 000008D9  33 C0		xor eax, eax ; wyzerowanie eax
 000008DB  8B 5D 08		mov ebx, adres
				;--- cykl --------------------------
 000008DE  80 3C 1E 2D		pocz: cmp byte ptr [ebx+esi], 02Dh ;porównanie z kodem '-'
 000008E2  75 07		jne @F
 000008E4  BA 00000001		mov edx, 1
 000008E9  EB 24		jmp nast
 000008EB  80 3C 1E 30		@@: cmp byte ptr [ebx+esi], 030h ;porównanie z kodem '0'
 000008EF  73 02		jae @F
 000008F1  EB 1C		jmp nast
 000008F3  80 3C 1E 39		@@: cmp byte ptr [ebx+esi], 039h ;porównanie z kodem '9'
 000008F7  76 02		jbe @F
 000008F9  EB 14		jmp nast
				;----
 000008FB  52			@@: push edx ; do edx procesor mo¿e zapisaæ wynik mno¿enia
 000008FC  BF 0000000A		mov edi, 10
 00000901  F7 E7		mul edi ;mno¿enie eax * edi
 00000903  8B F8		mov edi, eax ; tymczasowo z eax do edi
 00000905  33 C0		xor eax, eax ;zerowani eax
 00000907  8A 04 1E		mov AL, byte ptr [ebx+esi]
 0000090A  2C 30		sub AL, 030h ; korekta: cyfra = kod znaku - kod '0'
 0000090C  03 C7		add eax, edi ; dodanie cyfry
 0000090E  5A			pop edx
 0000090F  46			nast: inc esi
 00000910  49			dec ecx
 00000911  74 02		jz @F
 00000913  EB C9		jmp pocz
				;--- wynik
 00000915  0B D2		@@: or edx, edx ;analiza znacznika edx
 00000917  74 02		jz @F
 00000919  F7 D8		neg eax
 0000091B			@@:
				;--- zdejmowanie ze stosu
 0000091B  5F			pop edi
 0000091C  5E			pop esi
 0000091D  5A			pop edx
 0000091E  59			pop ecx
 0000091F  5B			pop ebx
				;--- powrót
				ret
 00000922			ScanInt endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000922			_text ends
				end start
				;----------------------------------------|
				;    Koniec segmentu kodu                |
				;----------------------------------------|
Microsoft (R) Macro Assembler Version 6.14.8444		    04/29/20 12:13:28
.\cw7\cw7.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

nowalinia  . . . . . . . . . . .	Proc
plznaki  . . . . . . . . . . . .	Proc
podajdeskr . . . . . . . . . . .	Proc
wyswietl . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00001330 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000922 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$00001 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000008C1 Private STDCALL
  losowe . . . . . . . . . . . .	L Near	 0000022C _TEXT	
  powt . . . . . . . . . . . . .	L Near	 000002CB _TEXT	
  powtE  . . . . . . . . . . . .	L Near	 0000032A _TEXT	
  powt2  . . . . . . . . . . . .	L Near	 000005B4 _TEXT	
  parz . . . . . . . . . . . . .	L Near	 00000654 _TEXT	
  dalej  . . . . . . . . . . . .	L Near	 000006AB _TEXT	
  zamyk  . . . . . . . . . . . .	L Near	 000006B5 _TEXT	
  powtE1 . . . . . . . . . . . .	L Near	 0000072A _TEXT	
  zamyk1 . . . . . . . . . . . .	L Near	 000007A4 _TEXT	
  powtE2 . . . . . . . . . . . .	L Near	 0000081C _TEXT	
  zamyk2 . . . . . . . . . . . .	L Near	 00000896 _TEXT	
  kon  . . . . . . . . . . . . .	L Near	 000008BA _TEXT	
CharToOemA . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CopyFileA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateDirectoryA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCurrentDirectoryA . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ScanInt  . . . . . . . . . . . .	P Near	 000008C1 _TEXT	Length= 00000061 Public C
  adres  . . . . . . . . . . . .	DWord	 bp + 00000008
  pocz . . . . . . . . . . . . .	L Near	 000008DE _TEXT	
  nast . . . . . . . . . . . . .	L Near	 0000090F _TEXT	
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrcatA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrcpyA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrlenA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
nrandom  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_HIddEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_FLAG_BACKUP_SEMANTICS . . .	Number	 02000000h   
FILE_FLAG_DELETE_ON_CLOSE  . . .	Number	 04000000h   
FILE_FLAG_NO_BUFFERING . . . . .	Number	 20000000h   
FILE_FLAG_OVERLAPPED . . . . . .	Number	 40000000h   
FILE_FLAG_POSIX_SEMANTICS  . . .	Number	 01000000h   
FILE_FLAG_RANDOM_ACCESS  . . . .	Number	 10000000h   
FILE_FLAG_SEQUENTIAL_SCAN  . . .	Number	 08000000h   
FILE_FLAG_WRITE_THROUGH  . . . .	Number	 -80000000h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_ARGUMENT_ARRAY  .	Number	 00002000h   
FORMAT_MESSAGE_FROM_HMODULE  . .	Number	 00000800h   
FORMAT_MESSAGE_FROM_STRING . . .	Number	 00000400h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FORMAT_MESSAGE_IGNORE_INSERTS  .	Number	 00000200h   
FORMAT_MESSAGE_MAX_WIDTH_MASK  .	Number	 000000FFh   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
buff . . . . . . . . . . . . . .	Byte	 0000111E _DATA	
bufor  . . . . . . . . . . . . .	Byte	 00000D1A _DATA	
buf  . . . . . . . . . . . . . .	Byte	 00000F1E _DATA	
dalej  . . . . . . . . . . . . .	L Near	 000006AB _TEXT	
format1  . . . . . . . . . . . .	Byte	 0000131E _DATA	
format2  . . . . . . . . . . . .	Byte	 00001326 _DATA	
hfile1 . . . . . . . . . . . . .	DWord	 00000B6F _DATA	
hfile2 . . . . . . . . . . . . .	DWord	 00000B73 _DATA	
hfile  . . . . . . . . . . . . .	DWord	 00000B6B _DATA	
hout . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
katDane  . . . . . . . . . . . .	Byte	 0000096B _DATA	
kon  . . . . . . . . . . . . . .	L Near	 000008BA _TEXT	
lenDANE  . . . . . . . . . . . .	DWord	 000002EC _DATA	
leng . . . . . . . . . . . . . .	DWord	 00000F1A _DATA	
liczba . . . . . . . . . . . . .	DWord	 00000D0B _DATA	
licznik1 . . . . . . . . . . . .	DWord	 00000D0F _DATA	
licznik2 . . . . . . . . . . . .	DWord	 00000D13 _DATA	
losowe . . . . . . . . . . . . .	L Near	 0000022C _TEXT	
mbuf . . . . . . . . . . . . . .	Number	 00000200h   
naglow . . . . . . . . . . . . .	Byte	 0000000B _DATA	
nastwiersz . . . . . . . . . . .	Byte	 00000D17 _DATA	
nazwa1 . . . . . . . . . . . . .	Byte	 00000300 _DATA	
nazwa2 . . . . . . . . . . . . .	Byte	 0000030B _DATA	
nazwaDANE  . . . . . . . . . . .	Byte	 000002F0 _DATA	
nazwat1  . . . . . . . . . . . .	Byte	 00000316 _DATA	
nazwat2  . . . . . . . . . . . .	Byte	 00000342 _DATA	
nazwa  . . . . . . . . . . . . .	Byte	 000002F6 _DATA	
nbytes . . . . . . . . . . . . .	DWord	 00000D07 _DATA	
nl2  . . . . . . . . . . . . . .	Byte	 00000007 _DATA	
nl . . . . . . . . . . . . . . .	Byte	 00000004 _DATA	
opisKatZadA2 . . . . . . . . . .	Byte	 00000078 _DATA	
opisKatZadA  . . . . . . . . . .	Byte	 00000048 _DATA	
opisKatZadB  . . . . . . . . . .	Byte	 000000B8 _DATA	
parz . . . . . . . . . . . . . .	L Near	 00000654 _TEXT	
powt2  . . . . . . . . . . . . .	L Near	 000005B4 _TEXT	
powtE1 . . . . . . . . . . . . .	L Near	 0000072A _TEXT	
powtE2 . . . . . . . . . . . . .	L Near	 0000081C _TEXT	
powtE  . . . . . . . . . . . . .	L Near	 0000032A _TEXT	
powt . . . . . . . . . . . . . .	L Near	 000002CB _TEXT	
rout . . . . . . . . . . . . . .	DWord	 000000E8 _DATA	
rozmA  . . . . . . . . . . . . .	DWord	 00000044 _DATA	
rozmB  . . . . . . . . . . . . .	DWord	 000000B4 _DATA	
rozmN  . . . . . . . . . . . . .	DWord	 00000034 _DATA	
rozmkatzadB  . . . . . . . . . .	DWord	 000000E4 _DATA	
rozmkatzada2 . . . . . . . . . .	DWord	 000000A4 _DATA	
rozmkatzada  . . . . . . . . . .	DWord	 00000074 _DATA	
rsymb  . . . . . . . . . . . . .	DWord	 0000132C _DATA	
sciezka  . . . . . . . . . . . .	Byte	 000000EC _DATA	
start  . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public STDCALL
tab  . . . . . . . . . . . . . .	DWord	 00000B77 _DATA	
tesTxt1  . . . . . . . . . . . .	Byte	 0000056B _DATA	
tesTxt2  . . . . . . . . . . . .	Byte	 0000076B _DATA	
tesTxt . . . . . . . . . . . . .	Byte	 0000036B _DATA	
zadanieA . . . . . . . . . . . .	Byte	 00000038 _DATA	
zadanieB . . . . . . . . . . . .	Byte	 000000A8 _DATA	
zamyk1 . . . . . . . . . . . . .	L Near	 000007A4 _TEXT	
zamyk2 . . . . . . . . . . . . .	L Near	 00000896 _TEXT	
zamyk  . . . . . . . . . . . . .	L Near	 000006B5 _TEXT	

	   0 Warnings
	   0 Errors
