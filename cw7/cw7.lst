Microsoft (R) Macro Assembler Version 6.14.8444		    04/29/20 13:11:21
.\cw7\cw7.asm						     Page 1 - 1


				;-------------------------------------------|
				;				  cw7.asm                   |
				;      Operacje na plikach i katalogach.    |
				;                                           |
				;	               Autor: Grzegorz Makowski |
				;                  MASM ver: 6.14.8444      |
				;                  ost. akt. 29.04.2020     |
				;-------------------------------------------|
				.586p
				.model flat, stdcall
				;-------------------------------------------|
				;     wczytanie plikow zewnetrznych         |
				;-------------------------------------------| 
				;-------------------------------------------|
				;    wczytanie wlasnych makr z pliku        |
				;-------------------------------------------|
				include mojemakra.mac	; Makra
			      C ;-------------------------------------------|
			      C ;				  mojemakra.mac             |
			      C ;      Operacje na plikach i katalogach.    |
			      C ;                ver 1.0                    |
			      C ;	               Autor: Grzegorz Makowski |
			      C ;                  MASM ver: 6.14.8444      |
			      C ;                  ost. akt. 28.04.2020     |
			      C ;-------------------------------------------|
			      C ;-------------------------------------------|
			      C ;           Makro do deskyptorow            |
			      C ;-------------------------------------------|
			      C podajdeskr macro handle, deskrypt 
			      C 	push	handle
			      C 	call	GetStdHandle
			      C 	mov	deskrypt,eax ; deskryptor bufora konsoli
			      C endm
			      C 
			      C ;-------------------------------------------|
			      C ;       Konwersja polskich znakow           |
			      C ;     Przyjmuje tab znakowa i bufor         |
			      C ;-------------------------------------------|
			      C plznaki macro text, bufor
			      C 	invoke CharToOemA, addr text, addr bufor
			      C endm
			      C 
			      C ;-------------------------------------------|
			      C ;Wyœwietlanie wyniku- tekstu na ekranie     |
			      C ;  bufor z plznaki lub kazy inny tekst      |
			      C ;-------------------------------------------|
			      C 
			      C wyswietl macro bufor, rozmiar
			      C 	push 0 ; rezerwa, musi byæ zero
			      C 	push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
			      C 	push rozmiar ; iloœæ znaków
			      C 	push offset bufor ; wska¿nik na tekst w buforze
			      C 	push hout ; deskryptor buforu konsoli
			      C 	call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
			      C endm
			      C 
			      C ;-------------------------------------------|
			      C ;     Makro do robienia odstepu linii       |
			      C ;przyjmuje kod hex nowej linni i ilosc zn.  |
			      C ;-------------------------------------------| 
			      C nowalinia macro nowa, ilznk
			      C 	push	0		        ; rezerwa, musi byæ zero
			      C 	push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
			      C 	push	ilznk		        ; iloœæ znaków
			      C 	push	offset nowa 	; wska¿nik na tekst
			      C 	push	hout		    ; deskryptor buforu konsoli
			      C 	call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
			      C endm
			      C 
				;-------------------------------------------|
				;      bilioteki systemowe i masm           |
				;-------------------------------------------|
				includelib .\lib\user32.lib
				includelib .\lib\kernel32.lib
				includelib .\lib\masm32.lib
				;-------------------------------------------|
				;    stale z pliku .\include\windows.inc    |
				;-------------------------------------------|
 =-0000000A			STD_INPUT_HANDLE equ -10
 =-0000000B			STD_OUTPUT_HANDLE equ -11
				;-------------------------------------------|
				;			stale do obslugi plikow	        |
				;-------------------------------------------|
 = 80000000			GENERIC_READ equ 80000000h
 = 40000000			GENERIC_WRITE equ 40000000h
 = 00000001			CREATE_NEW equ 1
 = 00000002			CREATE_ALWAYS equ 2
 = 00000003			OPEN_EXISTING equ 3
 = 00000004			OPEN_ALWAYS equ 4
 = 00000005			TRUNCATE_EXISTING equ 5
 = 80000000			FILE_FLAG_WRITE_THROUGH equ 80000000h
 = 40000000			FILE_FLAG_OVERLAPPED equ 40000000h
 = 20000000			FILE_FLAG_NO_BUFFERING equ 20000000h
 = 10000000			FILE_FLAG_RANDOM_ACCESS equ 10000000h
 = 08000000			FILE_FLAG_SEQUENTIAL_SCAN equ 8000000h
 = 04000000			FILE_FLAG_DELETE_ON_CLOSE equ 4000000h
 = 02000000			FILE_FLAG_BACKUP_SEMANTICS equ 2000000h
 = 01000000			FILE_FLAG_POSIX_SEMANTICS equ 1000000h
 = 00000001			FILE_ATTRIBUTE_READONLY equ 1h
 = 00000002			FILE_ATTRIBUTE_HIddEN equ 2h
 = 00000004			FILE_ATTRIBUTE_SYSTEM equ 4h
 = 00000010			FILE_ATTRIBUTE_DIRECTORY equ 10h
 = 00000020			FILE_ATTRIBUTE_ARCHIVE equ 20h
 = 00000080			FILE_ATTRIBUTE_NORMAL equ 80h
 = 00000100			FILE_ATTRIBUTE_TEMPORARY equ 100h
 = 00000800			FILE_ATTRIBUTE_COMPRESSED equ 800h
 = 00000100			FORMAT_MESSAGE_ALLOCATE_BUFFER equ 100h
 = 00000200			FORMAT_MESSAGE_IGNORE_INSERTS equ 200h
 = 00000400			FORMAT_MESSAGE_FROM_STRING equ 400h
 = 00000800			FORMAT_MESSAGE_FROM_HMODULE equ 800h
 = 00001000			FORMAT_MESSAGE_FROM_SYSTEM equ 1000h
 = 00002000			FORMAT_MESSAGE_ARGUMENT_ARRAY equ 2000h
 = 000000FF			FORMAT_MESSAGE_MAX_WIDTH_MASK equ 0FFh
				;--------------------------------|
				;            stale               |
				;--------------------------------|
 = 00000200			mbuf = 512
				;--- funkcje API Win32 z pliku .\include\user32.inc ---
				CharToOemA proto :dword,:dword
				;--- z pliku .\include\kernel32.inc ---
				GetStdHandle proto :dword
				ReadConsoleA proto :dword,:dword,:dword,:dword,:dword
				WriteConsoleA proto :dword,:dword,:dword,:dword,:dword
				ExitProcess proto :dword
				wsprintfA proto c :vararg
				;; int wsprintf(LPTSTR lpOut,// pointer to buffer for output
				;; LPCTSTR lpFmt,// pointer to format-control string
				;; ... // optional arguments );
				lstrlenA proto :dword
				GetCurrentDirectoryA proto :dword,:dword
				;;nBufferLength, lpBuffer; zwraca length
				CreateDirectoryA proto :dword,:dword
				;;lpPathName, lpSecurityAttributes; zwraca 0 jeœli b³ad
				lstrcatA proto :dword,:dword
				;; lpString1, lpString2; zwraca lpString1
				CreateFileA proto :dword,:dword,:dword,:dword,:dword,:dword,:dword
				;; LPCTSTR lpszName, DWORD fdwAccess,
				;; DWORD fdwShareMode, LPSECURITY_ATTRIBUTES lpsa, DWORD fdwCreate,
				;; DWORD fdwAttrsAndFlags, HANDLE hTemplateFile
				lstrcpyA proto :dword,:dword
				;;LPTSTR lpString1 // address of buffer, LPCTSTR lpString2 // address of string to copy
				CloseHandle proto :dword
				;; BOOL CloseHandle(HANDLE hObject)
				WriteFile proto :dword,:dword,:dword,:dword,:dword
				;; BOOL WriteFile(
				;; HANDLE hFile, // handle to file to write to
				;; LPCVOID lpBuffer, // pointer to data to write to file
				;; DWORD nNumberOfBytesToWrite, // number of bytes to write
				;; LPDWORD lpNumberOfBytesWritten, // pointer to number of bytes written
				;; LPOVERLAPPED lpOverlapped // pointer to structure needed for overlapped I/O
				;;);
				ReadFile proto :dword,:dword,:dword,:dword,:dword
				;;BOOL ReadFile(
				;;HANDLE hFile, // handle of file to read
				;;LPVOID lpBuffer, // address of buffer that receives data
				;;DWORD nNumberOfBytesToRead, // number of bytes to read
				;;LPDWORD lpNumberOfBytesRead, // address of number of bytes read
				;;LPOVERLAPPED lpOverlapped // address of structure for data
				;;);
				CopyFileA proto :dword,:dword,:dword
				;; BOOL CopyFile(
				;;LPCTSTR lpExistingFileName, // pointer to name of an existing file
				;;LPCTSTR lpNewFileName, // pointer to filename to copy to
				;;BOOL bFailIfExists // flag for operation if file exists
				;;);
				GetLastError proto
				;--- z pliku .\include\masm32.inc ---
				nrandom proto :dword
				;--- funkcje
				ScanInt proto C adres:dword

				;----------------------------------------|
				;    Poczatek segmentu danych            |
				;----------------------------------------|
 00000000			_data segment
 00000000 00000000		hout dd 0
 00000004 0D 0A 00		nl db 0Dh, 0Ah, 0	; nowa linia
 00000007 0D 0A 20 00		nl2	db 0Dh,0Ah,20h,0 ; nowa inne formatowanie
 0000000B 41 75 74 6F 72	naglow db "Autor aplikacji Grzegorz Makowski i53",0
	   20 61 70 6C 69
	   6B 61 63 6A 69
	   20 47 72 7A 65
	   67 6F 72 7A 20
	   4D 61 6B 6F 77
	   73 6B 69 20 69
	   35 33 00
				align 4 ; przesuniecie do adresu podzielnego na 4
 00000034 00000029		rozmN dd $ - naglow ;iloœæ znaków w tablicy
 00000038 5A 61 64 61 6E	zadanieA db "Zadanie a",0
	   69 65 20 61 00
				align 4
 00000044 0000000C		rozmA dd $ - zadanieA ; ilosc znakow tekstu zadanieA
 00000048 8C 63 69 65 7A	opisKatZadA db "Œciezki do katalogu DANE i pliku test.txt.",0
	   6B 69 20 64 6F
	   20 6B 61 74 61
	   6C 6F 67 75 20
	   44 41 4E 45 20
	   69 20 70 6C 69
	   6B 75 20 74 65
	   73 74 2E 74 78
	   74 2E 00
				align 4
 00000074 0000002C		rozmkatzada dd $ - opisKatZadA ; ilosc znakow w opisie zadania a
				align 4
 00000078 57 79 9C 77 69	opisKatZadA2 db "Wyœwietlenie losowej zawrtoœci pliku test.",0
	   65 74 6C 65 6E
	   69 65 20 6C 6F
	   73 6F 77 65 6A
	   20 7A 61 77 72
	   74 6F 9C 63 69
	   20 70 6C 69 6B
	   75 20 74 65 73
	   74 2E 00
				align 4
 000000A4 0000002C		rozmkatzada2 dd $ - opisKatZadA2 ; ilosc znakow w opisie zadania a
 000000A8 5A 61 64 61 6E	zadanieB db "Zadanie b",0
	   69 65 20 62 00
				align 4
 000000B4 0000000C		rozmB dd $ - zadanieB ; ilosc znakow tekstu zadanieB
				align 4
 000000B8 8C 63 69 65 7A	opisKatZadB db "Œciezki do plików: test1.txt i test2.txt.",0
	   6B 69 20 64 6F
	   20 70 6C 69 6B
	   F3 77 3A 20 74
	   65 73 74 31 2E
	   74 78 74 20 69
	   20 74 65 73 74
	   32 2E 74 78 74
	   2E 00
				align 4
 000000E4 0000002C		rozmkatzadB dd $ - opisKatZadB ; ilosc znakow w opisie zadania a
				align 4
 000000E8 00000000		rout dd 0
 000000EC  00000200 [		sciezka db mbuf dup(?)
	    00
	   ]
 000002EC 00000000		lenDANE dd 0
 000002F0 5C 44 41 4E 45	nazwaDANE db "\DANE",0
	   00
 000002F6 5C 74 65 73 74	nazwa db "\test.txt",0
	   2E 74 78 74 00
 00000300 5C 74 65 73 74	nazwa1 db "\test1.txt",0
	   31 2E 74 78 74
	   00
 0000030B 5C 74 65 73 74	nazwa2 db "\test2.txt",0
	   32 2E 74 78 74
	   00
 00000316 0D 0A 44 61 6E	nazwat1 db 13,10,"Dane z test1.txt - co osma nieparzysta:",13,10,0
	   65 20 7A 20 74
	   65 73 74 31 2E
	   74 78 74 20 2D
	   20 63 6F 20 6F
	   73 6D 61 20 6E
	   69 65 70 61 72
	   7A 79 73 74 61
	   3A 0D 0A 00
 00000342 0D 0A 44 61 6E	nazwat2 db 13,10,"Dane z test2.txt - co osma parzysta:",13,10,0
	   65 20 7A 20 74
	   65 73 74 32 2E
	   74 78 74 20 2D
	   20 63 6F 20 6F
	   73 6D 61 20 70
	   61 72 7A 79 73
	   74 61 3A 0D 0A
	   00
 0000036B  00000200 [		tesTxt db mbuf dup(?)	; bufor na sciezke dla pliku test.txt
	    00
	   ]
 0000056B  00000200 [		tesTxt1 db mbuf dup(?)	; bufor na sciezke dla pliku test1.txt
	    00
	   ]
 0000076B  00000200 [		tesTxt2 db mbuf dup(?)	; bufor na sciezke dla pliku test2.txt
	    00
	   ]
 0000096B  00000200 [		katDane db mbuf dup(?)	; bufor katalogu
	    00
	   ]
 00000B6B 00000000		hfile dd 0				; uchwyt do pliku test
 00000B6F 00000000		hfile1 dd 0				; uchwyt do pliku test1
 00000B73 00000000		hfile2 dd 0				; uchwyt do pliku test2
 00000B77  00000064 [		tab dd 100 dup(0)
	    00000000
	   ]
 00000D07 00000000		nbytes dd 0
 00000D0B 00000000		liczba dd 0
 00000D0F 00000000		licznik1 dd 0
 00000D13 00000000		licznik2 dd 0
 00000D17 0D 0A 00		nastwiersz db 13,10,0
 00000D1A  00000200 [		bufor db mbuf dup(0)
	    00
	   ]
 00000F1A 00000000		leng dd 0
 00000F1E  00000200 [		buf db mbuf dup(0)		; bufor pomocniczy
	    00
	   ]
 0000111E  00000200 [		buff db mbuf dup(0)		; bufor pomocniczy
	    00
	   ]
 0000131E 20 25 33 6C 64	format1 db " %3ld",13,10,0
	   0D 0A 00
 00001326 20 25 33 6C 64	format2 db " %3ld",0
	   00
 0000132C 00000000		rsymb dd 0
 00001330			_data ends
				;----------------------------------------|
				;    Koniec segmentu danych              |
				;----------------------------------------|

				;----------------------------------------|
				;    Poczatek segmentu kodu              |
				;----------------------------------------|
 00000000			_text segment
 00000000			start:
 00000000			;--- wywo³anie funkcji GetStdHandle - MAKRO
				podajdeskr STD_OUTPUT_HANDLE, hout		; MAKRO
 00000000  6A F5	     1		push	STD_OUTPUT_HANDLE
 00000002  E8 00000000 E     1		call	GetStdHandle
 00000007  A3 00000000 R     1		mov	hout,eax ; deskryptor bufora konsoli
				;--- nag³ówek ---------
				plznaki naglow, buf ; konwersja - MAKRO
				;--- wyœwietlenie  powitania ---------
				wyswietl buf, rozmN ; wyswietlenie - MAKRO
 0000001B  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 0000001D  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000022  FF 35 00000034 R  1		push rozmN ; iloœæ znaków
 00000028  68 00000F1E R     1		push offset buf ; wska¿nik na tekst w buforze
 0000002D  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000033  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				nowalinia nl, 2		; nowa linia - MAKRO
 00000038  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000003A  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000003F  6A 02	     1		push	2		        ; iloœæ znaków
 00000041  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000046  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000004C  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				nowalinia nl, 2		; nowa linia - MAKRO
 00000051  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000053  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000058  6A 02	     1		push	2		        ; iloœæ znaków
 0000005A  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 0000005F  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000065  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;--- wywietlenie tekstu Zadanie a ----
				plznaki zadanieA, buff		; MAKRO
				wyswietl buff, rozmA		; wyswietlenie - MAKRO
 00000079  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 0000007B  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000080  FF 35 00000044 R  1		push rozmA ; iloœæ znaków
 00000086  68 0000111E R     1		push offset buff ; wska¿nik na tekst w buforze
 0000008B  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000091  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				nowalinia nl, 2		; nowa linia - MAKRO
 00000096  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000098  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000009D  6A 02	     1		push	2		        ; iloœæ znaków
 0000009F  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000000A4  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000000AA  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				invoke GetCurrentDirectoryA, mbuf, offset sciezka ; pobranie pe³nej œcie¿ki
				nowalinia nl, 2		; MAKRO
 000000BE  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000000C0  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000000C5  6A 02	     1		push	2		        ; iloœæ znaków
 000000C7  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000000CC  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000000D2  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				invoke lstrcpyA, offset katDane, offset sciezka ; ³aczenie stringow
				invoke lstrcatA, offset katDane, offset nazwaDANE
				invoke lstrlenA, offset katDane
 000000FF  A3 000002EC R	mov lenDANE,eax
 00000104  A3 00000F1A R	mov leng, eax
				;--- 
				plznaki opisKatZadA, buf		; MAKRO 
				wyswietl buf, rozmkatzada	; wyswietlenie opisu zadania - MAKRO
 00000118  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 0000011A  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 0000011F  FF 35 00000074 R  1		push rozmkatzada ; iloœæ znaków
 00000125  68 00000F1E R     1		push offset buf ; wska¿nik na tekst w buforze
 0000012A  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000130  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;--- nowa linia
				nowalinia nl, 2		; nowa linia - MAKRO
 00000135  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 00000137  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 0000013C  6A 02	     1		push	2		        ; iloœæ znaków
 0000013E  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000143  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 00000149  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				wyswietl offset katDane, leng ; wyswietlenie pe³nego katalogu DANE - MAKRO
 0000014E  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 00000150  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 00000155  FF 35 00000F1A R  1		push leng ; iloœæ znaków
 0000015B  68 0000096B R     1		push offset offset katDane ; wska¿nik na tekst w buforze
 00000160  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 00000166  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;--- nowa linia
				nowalinia nl, 2		; nowa linia - MAKRO
 0000016B  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 0000016D  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 00000172  6A 02	     1		push	2		        ; iloœæ znaków
 00000174  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 00000179  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 0000017F  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				invoke CreateDirectoryA, offset katDane , 0 ; utworzenie katalogu
				invoke lstrcpyA, offset tesTxt, offset katDane
				invoke lstrcatA, offset tesTxt, offset nazwa
				invoke lstrlenA, offset tesTxt
 000001B8  A3 00000F1A R	mov leng, eax
				wyswietl offset tesTxt, leng ; MAKRO - wyswietlenie sciezki do pliku test.txt
 000001BD  6A 00	     1		push 0 ; rezerwa, musi byæ zero
 000001BF  68 000000E8 R     1		push offset rout ;wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków
 000001C4  FF 35 00000F1A R  1		push leng ; iloœæ znaków
 000001CA  68 0000036B R     1		push offset offset tesTxt ; wska¿nik na tekst w buforze
 000001CF  FF 35 00000000 R  1		push hout ; deskryptor buforu konsoli
 000001D5  E8 00000000 E     1		call WriteConsoleA ; wywo³anie funkcji WriteConsoleA
				;-- nowa linia
				nowalinia nl, 2		; nowa linia - MAKRO
 000001DA  6A 00	     1		push	0		        ; rezerwa, musi byæ zero
 000001DC  68 000000E8 R     1		push	offset rout     ; wskaŸnik na faktyczn¹ iloœæ wyprowadzonych znaków 
 000001E1  6A 02	     1		push	2		        ; iloœæ znaków
 000001E3  68 00000004 R     1		push	offset nl 	; wska¿nik na tekst
 000001E8  FF 35 00000000 R  1		push	hout		    ; deskryptor buforu konsoli
 000001EE  E8 00000000 E     1		call	WriteConsoleA	; wywo³anie funkcji WriteConsoleA
				;---
				invoke CreateFileA, offset tesTxt,GENERIC_WRITE , 0, 0, CREATE_ALWAYS, 0, 0 ; tworzenie pliku
 0000020C  A3 00000B6B R	mov hfile, eax
				;---
				invoke CloseHandle, hfile
				;--- liczby pseudolosowe -> tablica
 0000021C  8D 1D 00000B77 R	lea ebx, tab
 00000222  BF 00000000		mov edi, 0
 00000227  B9 00000064		mov ecx, 100
 0000022C			losowe:
 0000022C  51			push ecx
 0000022D  53			push ebx
				;;;
				invoke nrandom, 200
 00000238  83 E8 63		sub eax, 99
				;;;
 0000023B  5B			pop ebx
 0000023C  89 03		mov dword ptr [ebx], eax
 0000023E  83 C3 04		add ebx, 4
 00000241  59			pop ecx
 00000242  E2 E8		loop losowe
				;------------------------------|
				;       plik "test.txt"        |
				;------------------------------|
				;--- nowa linia
				INVOKE lstrlenA, OFFSET tesTxt
 0000024E  A3 00000F1A R	mov leng, EAX
				INVOKE WriteConsoleA, hout, OFFSET tesTxt, leng , OFFSET rout , 0
				INVOKE WriteConsoleA, hout, OFFSET nastwiersz, 2 , OFFSET rout , 0
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				INVOKE CreateFileA, OFFSET tesTxt,GENERIC_READ OR GENERIC_WRITE , 0, 0, OPEN_EXISTING, 0, 0 ; tworzenie pliku
 000002A2  A3 00000B6B R	mov hfile, EAX
				;-- z tablicy do pliku ----
 000002A7  8D 1D 00000B77 R	lea EBX, tab
 000002AD  B9 00000064		mov ECX, 100
 000002B2			powt:
 000002B2  51			push ECX
 000002B3  53			push EBX
				INVOKE wsprintfA,OFFSET buf,OFFSET format1,DWORD PTR [EBX]
 000002C8  A3 0000132C R	mov rsymb,EAX
				INVOKE WriteFile, hfile, OFFSET buf ,rsymb , OFFSET nbytes, 0
 000002EA  5B			pop EBX
 000002EB  83 C3 04		add EBX, 4
 000002EE  59			pop ECX
 000002EF  E2 C1		loop powt
				;;;
				INVOKE CloseHandle, hfile
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;-- pobranie z tablicy na ekran po 10 liczb na wierszu ----
 000002FC  8D 1D 00000B77 R	lea EBX, tab
 00000302  B9 00000064		mov ECX, 100
 00000307  C7 05 00000D0F R	mov licznik1,0
	   00000000
 00000311			powtE:
 00000311  51			push ECX ;;
 00000312  53			push EBX
				;;;
 00000313  A1 00000D0F R	mov EAX,licznik1
 00000318  0B C0		or EAX,EAX
 0000031A  75 19		jnz @F
				;--- new line ---------
				INVOKE WriteConsoleA,hout,OFFSET nastwiersz,2,OFFSET rout,0 ; wywo³anie funkcji WriteConsoleA
 00000335			@@:
 00000335  FF 05 00000D0F R	inc licznik1
 0000033B  83 3D 00000D0F R	cmp licznik1,10
	   0A
 00000342  72 0A		jb @F
 00000344  C7 05 00000D0F R	mov licznik1,0
	   00000000
 0000034E			@@:
 0000034E  5B			pop EBX
 0000034F  53			push EBX
				INVOKE wsprintfA,OFFSET buf,OFFSET format2,DWORD PTR [EBX]
 00000364  A3 0000132C R	mov rsymb,EAX
				INVOKE WriteConsoleA, hout, OFFSET buf ,rsymb , OFFSET nbytes, 0
				;;;
 00000386  5B			pop EBX
 00000387  83 C3 04		add EBX, 4
 0000038A  59			pop ECX
 0000038B  E2 84		loop powtE
				;--- new line ---------
				INVOKE WriteConsoleA,hout,OFFSET nastwiersz,2,OFFSET rout,0 ; wywo³anie funkcji WriteConsoleA
				;--- new line ---------
				INVOKE WriteConsoleA,hout,OFFSET nastwiersz,2,OFFSET rout,0 ; wywo³anie funkcji WriteConsoleA
				;;
				;;---------- operacje na plikach ------
				;;
				INVOKE CreateFileA, OFFSET tesTxt,GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0 ; plik test.txt
 000003D8  A3 00000B6B R	mov hfile, EAX
				INVOKE lstrcpyA, OFFSET tesTxt1, OFFSET katDane
				INVOKE lstrcatA, OFFSET tesTxt1, OFFSET nazwa1
				INVOKE lstrlenA, OFFSET tesTxt1
 00000405  A3 00000F1A R	mov leng, EAX
				INVOKE WriteConsoleA, hout, OFFSET tesTxt1, leng , OFFSET rout , 0
				INVOKE WriteConsoleA, hout, OFFSET nastwiersz, 2 , OFFSET rout , 0
				INVOKE CreateFileA, OFFSET tesTxt1,GENERIC_WRITE , 0, 0, CREATE_ALWAYS, 0, 0 ; stworzenie pliku
 00000459  A3 00000B6F R	mov hfile1, EAX
				INVOKE lstrcpyA, OFFSET tesTxt2, OFFSET katDane
				INVOKE lstrcatA, OFFSET tesTxt2, OFFSET nazwa2
				INVOKE lstrlenA, OFFSET tesTxt2
 00000486  A3 00000F1A R	mov leng, EAX
				INVOKE WriteConsoleA, hout, OFFSET tesTxt2, leng , OFFSET rout , 0
				INVOKE WriteConsoleA, hout, OFFSET nastwiersz, 2 , OFFSET rout , 0
				INVOKE CreateFileA, OFFSET tesTxt2,GENERIC_WRITE , 0, 0, CREATE_ALWAYS, 0, 0 ; stworzenie pliku
 000004DA  A3 00000B73 R	mov hfile2, EAX
				;---------
 000004DF  B9 00000064		mov ECX, 100
 000004E4  C7 05 00000D0F R	mov licznik1,8 ;co osma parzysta
	   00000008
 000004EE  C7 05 00000D13 R	mov licznik2,8 ;co osma nieparzysta
	   00000008
 000004F8			powt2:
 000004F8  51			push ECX
				INVOKE ReadFile, hfile, OFFSET buf ,6 , OFFSET nbytes, 0 ;;
 00000512  83 3D 00000D07 R	cmp nbytes,0
	   00
 00000519  75 05		jnz @F
 0000051B  E9 000000D9		jmp zamyk
 00000520			@@:
				INVOKE ScanInt,OFFSET buf ; tekst ASCII -> liczba
 0000052D  A3 00000D0B R	mov liczba,EAX
 00000532  A1 00000D0B R	mov EAX,liczba
 00000537  A9 00000001		test EAX,1h
 0000053C  74 5A		jz parz
				;-- nieparzysta
 0000053E  FF 0D 00000D13 R	dec licznik2
 00000544  83 3D 00000D13 R	cmp licznik2,0
	   00
 0000054B  74 05		je @F
 0000054D  E9 0000009D		jmp dalej
 00000552			@@:
 00000552  C7 05 00000D13 R	mov licznik2,8
	   00000008
				INVOKE wsprintfA,OFFSET buf,OFFSET format1,liczba
 00000574  A3 0000132C R	mov rsymb,EAX
				INVOKE WriteFile, hfile1, OFFSET buf ,rsymb , OFFSET nbytes, 0
 00000596  EB 57		jmp dalej
 00000598			parz:
				;-- parzysta
 00000598  FF 0D 00000D0F R	dec licznik1
 0000059E  83 3D 00000D0F R	cmp licznik1,0
	   00
 000005A5  74 02		je @F
 000005A7  EB 46		jmp dalej
 000005A9			@@:
 000005A9  C7 05 00000D0F R	mov licznik1,8
	   00000008
				INVOKE wsprintfA,OFFSET buf,OFFSET format1,liczba
 000005CB  A3 0000132C R	mov rsymb,EAX
				INVOKE WriteFile, hfile2, OFFSET buf ,rsymb , OFFSET nbytes, 0
 000005ED  EB 00		jmp dalej
 000005EF			dalej:
 000005EF  59			pop ECX
 000005F0  E2 02		loop @F
 000005F2  EB 05		jmp zamyk
 000005F4			@@:
 000005F4  E9 FFFFFEFF		jmp powt2
 000005F9			zamyk:
				INVOKE CloseHandle, hfile
				INVOKE CloseHandle, hfile1
				INVOKE CloseHandle, hfile2
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				INVOKE lstrlenA, OFFSET nazwat1
 00000624  A3 00000F1A R	mov leng, EAX
				INVOKE WriteConsoleA, hout, OFFSET nazwat1, leng , OFFSET rout , 0
				;;
				;;---------plik 1 ----------
				;;
				INVOKE CreateFileA, OFFSET tesTxt1,GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0 ; plik test1.txt
 0000065F  A3 00000B6F R	mov hfile1, EAX
 00000664  C7 05 00000D0F R	mov licznik1,0
	   00000000
 0000066E			powtE1:
				INVOKE ReadFile, hfile1, OFFSET buf ,6 , OFFSET nbytes, 0 ;;
 00000687  83 3D 00000D07 R	cmp nbytes,0
	   00
 0000068E  75 02		jnz @F
 00000690  EB 56		jmp zamyk1
 00000692			@@:
 00000692  83 3D 00000D0F R	cmp licznik1,0
	   00
 00000699  75 19		jnz @F
				;--- new line ---------
				INVOKE WriteConsoleA,hout,OFFSET nastwiersz,2,OFFSET rout,0 ; wywo³anie funkcji WriteConsoleA
 000006B4			@@:
 000006B4  FF 05 00000D0F R	inc licznik1
 000006BA  83 3D 00000D0F R	cmp licznik1,10
	   0A
 000006C1  72 0A		jb @F
 000006C3  C7 05 00000D0F R	mov licznik1,0
	   00000000
 000006CD			@@:
				INVOKE WriteConsoleA, hout, OFFSET buf ,4, OFFSET nbytes, 0
 000006E6  EB 86		jmp powtE1
 000006E8			zamyk1:
				INVOKE CloseHandle, hfile1
				;--- new line ---------
				INVOKE WriteConsoleA,hout,OFFSET nastwiersz,2,OFFSET rout,0 ; wywo³anie funkcji WriteConsoleA
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				INVOKE lstrlenA, OFFSET nazwat2
 00000716  A3 00000F1A R	mov leng, EAX
				INVOKE WriteConsoleA, hout, OFFSET nazwat2, leng , OFFSET rout , 0
				;;
				;;----------plik 2 ------
				;;
				INVOKE CreateFileA, OFFSET tesTxt2,GENERIC_READ, 0, 0, OPEN_EXISTING, 0, 0 ; plik test2.txt
 00000751  A3 00000B6F R	mov hfile1, EAX
 00000756  C7 05 00000D0F R	mov licznik1,0
	   00000000
 00000760			powtE2:
				INVOKE ReadFile, hfile2, OFFSET buf ,6 , OFFSET nbytes, 0 ;;
 00000779  83 3D 00000D07 R	cmp nbytes,0
	   00
 00000780  75 02		jnz @F
 00000782  EB 56		jmp zamyk2
 00000784			@@:
 00000784  83 3D 00000D0F R	cmp licznik1,0
	   00
 0000078B  75 19		jnz @F
				;--- new line ---------
				INVOKE WriteConsoleA,hout,OFFSET nastwiersz,2,OFFSET rout,0 ; wywo³anie funkcji WriteConsoleA
 000007A6			@@:
 000007A6  FF 05 00000D0F R	inc licznik1
 000007AC  83 3D 00000D0F R	cmp licznik1,10
	   0A
 000007B3  72 0A		jb @F
 000007B5  C7 05 00000D0F R	mov licznik1,0
	   00000000
 000007BF			@@:
				INVOKE WriteConsoleA, hout, OFFSET buf ,4, OFFSET nbytes, 0
 000007D8  EB 86		jmp powtE2
 000007DA			zamyk2:
				INVOKE CloseHandle, hfile2
				;--- new line ---------
				INVOKE WriteConsoleA,hout,OFFSET nastwiersz,2,OFFSET rout,0 ; wywo³anie funkcji WriteConsoleA
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000007FE			kon:
				;----- wywo³anie funkcji ExitProcess ---------
				INVOKE ExitProcess,0
				;==================================
				;=== Podprogramy ==================
				;==================================
 00000805 00000805		ScanInt PROC C adres
				;; funkcja ScanInt przekszta³ca ci¹g cyfr do liczby, któr¹ jest zwracana przez EAX
				;; argument - zakoñczony zerem wiersz z cyframi
				;; rejestry: EBX - adres wiersza, EDX - znak liczby, ESI - indeks cyfry w wierszu, EDI - tymczasowy
				;--- pocz¹tek funkcji
				;--- odk³adanie na stos
 00000808  53			push EBX
 00000809  51			push ECX
 0000080A  52			push EDX
 0000080B  56			push ESI
 0000080C  57			push EDI
				;--- przygotowywanie cyklu
				INVOKE lstrlenA, adres
 00000815  8B F8		mov EDI, EAX ;iloœæ znaków
 00000817  8B C8		mov ECX, EAX ;iloœæ powtórzeñ = iloœæ znaków
 00000819  33 F6		xor ESI, ESI ; wyzerowanie ESI
 0000081B  33 D2		xor EDX, EDX ; wyzerowanie EDX
 0000081D  33 C0		xor EAX, EAX ; wyzerowanie EAX
 0000081F  8B 5D 08		mov EBX, adres
				;--- cykl --------------------------
 00000822  80 3C 1E 2D		pocz: cmp BYTE PTR [EBX+ESI], 02Dh ;porównanie z kodem '-'
 00000826  75 07		jne @F
 00000828  BA 00000001		mov EDX, 1
 0000082D  EB 24		jmp nast
 0000082F  80 3C 1E 30		@@: cmp BYTE PTR [EBX+ESI], 030h ;porównanie z kodem '0'
 00000833  73 02		jae @F
 00000835  EB 1C		jmp nast
 00000837  80 3C 1E 39		@@: cmp BYTE PTR [EBX+ESI], 039h ;porównanie z kodem '9'
 0000083B  76 02		jbe @F
 0000083D  EB 14		jmp nast
				;----
 0000083F  52			@@: push EDX ; do EDX procesor mo¿e zapisaæ wynik mno¿enia
 00000840  BF 0000000A		mov EDI, 10
 00000845  F7 E7		mul EDI ;mno¿enie EAX * EDI
 00000847  8B F8		mov EDI, EAX ; tymczasowo z EAX do EDI
 00000849  33 C0		xor EAX, EAX ;zerowani EAX
 0000084B  8A 04 1E		mov AL, BYTE PTR [EBX+ESI]
 0000084E  2C 30		sub AL, 030h ; korekta: cyfra = kod znaku - kod '0'
 00000850  03 C7		add EAX, EDI ; dodanie cyfry
 00000852  5A			pop EDX
 00000853  46			nast: inc ESI
 00000854  49			dec ECX
 00000855  74 02		jz @F
 00000857  EB C9		jmp pocz
				;--- wynik
 00000859  0B D2		@@: or EDX, EDX ;analiza znacznika EDX
 0000085B  74 02		jz @F
 0000085D  F7 D8		neg EAX
 0000085F			@@:
				;--- zdejmowanie ze stosu
 0000085F  5F			pop EDI
 00000860  5E			pop ESI
 00000861  5A			pop EDX
 00000862  59			pop ECX
 00000863  5B			pop EBX
				;--- powrót
				ret
 00000866			ScanInt ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000866			_text ends
				end start
				;----------------------------------------|
				;    Koniec segmentu kodu                |
				;----------------------------------------|
Microsoft (R) Macro Assembler Version 6.14.8444		    04/29/20 13:11:21
.\cw7\cw7.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

nowalinia  . . . . . . . . . . .	Proc
plznaki  . . . . . . . . . . . .	Proc
podajdeskr . . . . . . . . . . .	Proc
wyswietl . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00001330 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000866 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$00001 . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000805 Private STDCALL
  losowe . . . . . . . . . . . .	L Near	 0000022C _TEXT	
  powt . . . . . . . . . . . . .	L Near	 000002B2 _TEXT	
  powtE  . . . . . . . . . . . .	L Near	 00000311 _TEXT	
  powt2  . . . . . . . . . . . .	L Near	 000004F8 _TEXT	
  parz . . . . . . . . . . . . .	L Near	 00000598 _TEXT	
  dalej  . . . . . . . . . . . .	L Near	 000005EF _TEXT	
  zamyk  . . . . . . . . . . . .	L Near	 000005F9 _TEXT	
  powtE1 . . . . . . . . . . . .	L Near	 0000066E _TEXT	
  zamyk1 . . . . . . . . . . . .	L Near	 000006E8 _TEXT	
  powtE2 . . . . . . . . . . . .	L Near	 00000760 _TEXT	
  zamyk2 . . . . . . . . . . . .	L Near	 000007DA _TEXT	
  kon  . . . . . . . . . . . . .	L Near	 000007FE _TEXT	
CharToOemA . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CopyFileA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateDirectoryA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCurrentDirectoryA . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ScanInt  . . . . . . . . . . . .	P Near	 00000805 _TEXT	Length= 00000061 Public C
  adres  . . . . . . . . . . . .	DWord	 bp + 00000008
  pocz . . . . . . . . . . . . .	L Near	 00000822 _TEXT	
  nast . . . . . . . . . . . . .	L Near	 00000853 _TEXT	
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrcatA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrcpyA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrlenA . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
nrandom  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_HIddEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_FLAG_BACKUP_SEMANTICS . . .	Number	 02000000h   
FILE_FLAG_DELETE_ON_CLOSE  . . .	Number	 04000000h   
FILE_FLAG_NO_BUFFERING . . . . .	Number	 20000000h   
FILE_FLAG_OVERLAPPED . . . . . .	Number	 40000000h   
FILE_FLAG_POSIX_SEMANTICS  . . .	Number	 01000000h   
FILE_FLAG_RANDOM_ACCESS  . . . .	Number	 10000000h   
FILE_FLAG_SEQUENTIAL_SCAN  . . .	Number	 08000000h   
FILE_FLAG_WRITE_THROUGH  . . . .	Number	 -80000000h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_ARGUMENT_ARRAY  .	Number	 00002000h   
FORMAT_MESSAGE_FROM_HMODULE  . .	Number	 00000800h   
FORMAT_MESSAGE_FROM_STRING . . .	Number	 00000400h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FORMAT_MESSAGE_IGNORE_INSERTS  .	Number	 00000200h   
FORMAT_MESSAGE_MAX_WIDTH_MASK  .	Number	 000000FFh   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
buff . . . . . . . . . . . . . .	Byte	 0000111E _DATA	
bufor  . . . . . . . . . . . . .	Byte	 00000D1A _DATA	
buf  . . . . . . . . . . . . . .	Byte	 00000F1E _DATA	
dalej  . . . . . . . . . . . . .	L Near	 000005EF _TEXT	
format1  . . . . . . . . . . . .	Byte	 0000131E _DATA	
format2  . . . . . . . . . . . .	Byte	 00001326 _DATA	
hfile1 . . . . . . . . . . . . .	DWord	 00000B6F _DATA	
hfile2 . . . . . . . . . . . . .	DWord	 00000B73 _DATA	
hfile  . . . . . . . . . . . . .	DWord	 00000B6B _DATA	
hout . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
katDane  . . . . . . . . . . . .	Byte	 0000096B _DATA	
kon  . . . . . . . . . . . . . .	L Near	 000007FE _TEXT	
lenDANE  . . . . . . . . . . . .	DWord	 000002EC _DATA	
leng . . . . . . . . . . . . . .	DWord	 00000F1A _DATA	
liczba . . . . . . . . . . . . .	DWord	 00000D0B _DATA	
licznik1 . . . . . . . . . . . .	DWord	 00000D0F _DATA	
licznik2 . . . . . . . . . . . .	DWord	 00000D13 _DATA	
losowe . . . . . . . . . . . . .	L Near	 0000022C _TEXT	
mbuf . . . . . . . . . . . . . .	Number	 00000200h   
naglow . . . . . . . . . . . . .	Byte	 0000000B _DATA	
nastwiersz . . . . . . . . . . .	Byte	 00000D17 _DATA	
nazwa1 . . . . . . . . . . . . .	Byte	 00000300 _DATA	
nazwa2 . . . . . . . . . . . . .	Byte	 0000030B _DATA	
nazwaDANE  . . . . . . . . . . .	Byte	 000002F0 _DATA	
nazwat1  . . . . . . . . . . . .	Byte	 00000316 _DATA	
nazwat2  . . . . . . . . . . . .	Byte	 00000342 _DATA	
nazwa  . . . . . . . . . . . . .	Byte	 000002F6 _DATA	
nbytes . . . . . . . . . . . . .	DWord	 00000D07 _DATA	
nl2  . . . . . . . . . . . . . .	Byte	 00000007 _DATA	
nl . . . . . . . . . . . . . . .	Byte	 00000004 _DATA	
opisKatZadA2 . . . . . . . . . .	Byte	 00000078 _DATA	
opisKatZadA  . . . . . . . . . .	Byte	 00000048 _DATA	
opisKatZadB  . . . . . . . . . .	Byte	 000000B8 _DATA	
parz . . . . . . . . . . . . . .	L Near	 00000598 _TEXT	
powt2  . . . . . . . . . . . . .	L Near	 000004F8 _TEXT	
powtE1 . . . . . . . . . . . . .	L Near	 0000066E _TEXT	
powtE2 . . . . . . . . . . . . .	L Near	 00000760 _TEXT	
powtE  . . . . . . . . . . . . .	L Near	 00000311 _TEXT	
powt . . . . . . . . . . . . . .	L Near	 000002B2 _TEXT	
rout . . . . . . . . . . . . . .	DWord	 000000E8 _DATA	
rozmA  . . . . . . . . . . . . .	DWord	 00000044 _DATA	
rozmB  . . . . . . . . . . . . .	DWord	 000000B4 _DATA	
rozmN  . . . . . . . . . . . . .	DWord	 00000034 _DATA	
rozmkatzadB  . . . . . . . . . .	DWord	 000000E4 _DATA	
rozmkatzada2 . . . . . . . . . .	DWord	 000000A4 _DATA	
rozmkatzada  . . . . . . . . . .	DWord	 00000074 _DATA	
rsymb  . . . . . . . . . . . . .	DWord	 0000132C _DATA	
sciezka  . . . . . . . . . . . .	Byte	 000000EC _DATA	
start  . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public STDCALL
tab  . . . . . . . . . . . . . .	DWord	 00000B77 _DATA	
tesTxt1  . . . . . . . . . . . .	Byte	 0000056B _DATA	
tesTxt2  . . . . . . . . . . . .	Byte	 0000076B _DATA	
tesTxt . . . . . . . . . . . . .	Byte	 0000036B _DATA	
zadanieA . . . . . . . . . . . .	Byte	 00000038 _DATA	
zadanieB . . . . . . . . . . . .	Byte	 000000A8 _DATA	
zamyk1 . . . . . . . . . . . . .	L Near	 000006E8 _TEXT	
zamyk2 . . . . . . . . . . . . .	L Near	 000007DA _TEXT	
zamyk  . . . . . . . . . . . . .	L Near	 000005F9 _TEXT	

	   0 Warnings
	   0 Errors
